#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π (baseline)
"""

import json
import subprocess
import re
from pathlib import Path
from typing import Dict, List, Any, Tuple
from datetime import datetime

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    from create_baseline_config import get_cpu_info, get_memory_info, get_pci_info, get_usb_info, get_storage_info
    BASELINE_FUNCTIONS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å create_baseline_config –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ—É–Ω–∫—Ü–∏–∏.")
    BASELINE_FUNCTIONS_AVAILABLE = False

def fallback_get_cpu_info():
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU"""
    try:
        result = subprocess.run(['dmidecode', '-t', 'processor'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode != 0:
            return []
        
        processors = []
        socket_id = 0
        socket = f'CPU{socket_id}'  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º socket –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        for line in result.stdout.splitlines():
            if 'Socket Designation:' in line:
                socket = line.split(':', 1)[1].strip()
            elif 'Version:' in line and 'INTEL' in line.upper():
                model = line.split(':', 1)[1].strip()
                processors.append({
                    'socket': socket,
                    'model': model,
                    'cores': 'Unknown',
                    'threads': 'Unknown'
                })
                socket_id += 1
                socket = f'CPU{socket_id}'  # –û–±–Ω–æ–≤–ª—è–µ–º socket –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        return processors
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ CPU info: {e}")
        return []

def fallback_get_memory_info():
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏"""
    try:
        result = subprocess.run(['dmidecode', '-t', 'memory'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode != 0:
            return []
        
        memory_modules = []
        current_module = {}
        
        for line in result.stdout.splitlines():
            line = line.strip()
            if 'Locator:' in line and 'Bank' not in line:
                if current_module:
                    memory_modules.append(current_module)
                current_module = {'slot': line.split(':', 1)[1].strip()}
            elif 'Size:' in line:
                size = line.split(':', 1)[1].strip()
                current_module['size'] = size
                current_module['populated'] = 'No Module Installed' not in size
        
        if current_module:
            memory_modules.append(current_module)
        return memory_modules
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ memory info: {e}")
        return []

def fallback_get_pci_info():
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PCI"""
    try:
        result = subprocess.run(['lspci', '-v'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode != 0:
            return []
        
        devices = []
        for line in result.stdout.splitlines():
            if re.match(r'^[0-9a-f]{2}:[0-9a-f]{2}\.[0-9a-f]', line):
                bdf_desc = line.split(' ', 1)
                if len(bdf_desc) == 2:
                    devices.append({
                        'bdf': bdf_desc[0],
                        'description': bdf_desc[1],
                        'class': bdf_desc[1],
                        'width': 'unknown',
                        'speed': 'unknown'
                    })
        return devices
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ PCI info: {e}")
        return []

def fallback_get_usb_info():
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ USB"""
    try:
        result = subprocess.run(['lsusb'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode != 0:
            return []
        
        devices = []
        for line in result.stdout.splitlines():
            if 'Bus' in line and 'Device' in line:
                parts = line.split()
                if len(parts) >= 6:
                    vid_pid = parts[5]
                    description = ' '.join(parts[6:]) if len(parts) > 6 else 'Unknown'
                    devices.append({
                        'bus': parts[1],
                        'device': parts[3].rstrip(':'),
                        'vid_pid': vid_pid,
                        'description': description,
                        'usb_version': 'USB2.0'
                    })
        return devices
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ USB info: {e}")
        return []

def fallback_get_storage_info():
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è—Ö"""
    try:
        result = subprocess.run(['lsblk', '-J'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode != 0:
            return []
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JSON
        try:
            data = json.loads(result.stdout)
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç lsblk: {e}")
            return []
        
        devices = []
        
        for device in data.get('blockdevices', []):
            if device.get('type') == 'disk':
                devices.append({
                    'name': device['name'],
                    'model': device.get('model', 'Unknown'),
                    'size': device.get('size', '0B'),
                    'type': 'nvme' if 'nvme' in device['name'] else 'sata',
                    'interface': 'NVMe' if 'nvme' in device['name'] else 'SATA'
                })
        return devices
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ storage info: {e}")
        return []

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if BASELINE_FUNCTIONS_AVAILABLE:
    cpu_info_func = get_cpu_info
    memory_info_func = get_memory_info
    pci_info_func = get_pci_info
    usb_info_func = get_usb_info
    storage_info_func = get_storage_info
else:
    cpu_info_func = fallback_get_cpu_info
    memory_info_func = fallback_get_memory_info
    pci_info_func = fallback_get_pci_info
    usb_info_func = fallback_get_usb_info
    storage_info_func = fallback_get_storage_info

class HardwareDiff:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∞–ª–æ–Ω–æ–º"""
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    STATUS_PRIORITY = {
        'PASS': 0,
        'WARNING': 1,
        'FAIL': 2,
        'ERROR': 3,
        'UNKNOWN': 4
    }
    
    def __init__(self, baseline_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Ç–µ–º –∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        
        Args:
            baseline_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        """
        self.baseline_path = Path(baseline_path)
        self.baseline_config = self._load_baseline()
        self.diff_results = {}
        self.overall_status = 'UNKNOWN'
        
    def _load_baseline(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.baseline_path.exists():
            raise FileNotFoundError(f'–≠—Ç–∞–ª–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.baseline_path}')
        
        with self.baseline_path.open('r', encoding='utf-8') as f:
            return json.load(f)
    
    def collect_current_config(self) -> Dict:
        """–°–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –°–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–π–∑–µ—Ä–∞—Ö
        def get_riser_info():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–π–∑–µ—Ä–∞—Ö —á–µ—Ä–µ–∑ FRU –∏ PCI —Ç–æ–ø–æ–ª–æ–≥–∏—é"""
            risers = []
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º FRU –∑–∞–ø–∏—Å–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ä–∞–π–∑–µ—Ä–æ–≤
            for fru_id in range(1, 10):  # –û–±—ã—á–Ω–æ FRU ID 1-9 –¥–ª—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                try:
                    cmd = ['ipmitool', 'fru', 'print', str(fru_id)]
                    # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π
                    print(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
                    
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
                    
                    if result.returncode == 0 and 'Product Name' in result.stdout:
                        fru_data = {}
                        for line in result.stdout.splitlines():
                            if ':' in line:
                                key, value = line.split(':', 1)
                                key = key.strip()
                                value = value.strip()
                                
                                if 'Product Name' in key:
                                    fru_data['fru_product_name'] = value
                                elif 'Product Manufacturer' in key:
                                    fru_data['fru_manufacturer'] = value
                                elif 'Product Part Number' in key:
                                    fru_data['fru_part_number'] = value
                                elif 'Product Serial' in key:
                                    fru_data['fru_serial_number'] = value
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞–π–∑–µ—Ä–æ–º
                        product_name = fru_data.get('fru_product_name', '').upper()
                        if 'RISER' in product_name or 'RSMB-MS93' in product_name:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç —Ä–∞–π–∑–µ—Ä–∞ –∏–∑ Product Name
                            if 'RISER-1' in product_name:
                                slot = 'RISER_SLOT_1'
                            elif 'RISER-2' in product_name:
                                slot = 'RISER_SLOT_2'
                            elif 'RISER-3' in product_name:
                                slot = 'RISER_SLOT_3'
                            else:
                                slot = f'RISER_SLOT_{fru_id}'
                            
                            riser_info = {
                                'slot': slot,
                                'fru_id': fru_id,
                                'populated': True,
                                **fru_data,
                                'pcie_slots': []  # PCIe —Å–ª–æ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
                            }
                            risers.append(riser_info)
                            
                except (subprocess.TimeoutExpired, FileNotFoundError):
                    continue
                except (subprocess.CalledProcessError, json.JSONDecodeError, KeyError) as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ FRU {fru_id}: {type(e).__name__}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–π–∑–µ—Ä—ã —á–µ—Ä–µ–∑ FRU, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PCI —Ç–æ–ø–æ–ª–æ–≥–∏—é
            if not risers:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ PCI
                    result = subprocess.run(['lspci', '-t'], capture_output=True, text=True, timeout=10)
                    if result.returncode == 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PCI –º–æ—Å—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–π–∑–µ—Ä–æ–≤
                        pci_bridges = []
                        for line in result.stdout.splitlines():
                            # –ò—â–µ–º –º–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∞–π–∑–µ—Ä–∞–º–∏
                            if '-[' in line and ']' in line:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º BDF –∞–¥—Ä–µ—Å–∞ –º–æ—Å—Ç–æ–≤
                                bridge_match = re.search(r'(\w+:\w+\.\w+)', line)
                                if bridge_match:
                                    pci_bridges.append(bridge_match.group(1))
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—Å—Ç–∞—Ö
                        bridge_details = []
                        try:
                            result = subprocess.run(['lspci', '-v'], capture_output=True, text=True, timeout=10)
                            if result.returncode == 0:
                                for line in result.stdout.splitlines():
                                    for bridge in pci_bridges:
                                        if bridge in line and 'bridge' in line.lower():
                                            bridge_details.append(line)
                        except Exception:
                            pass
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
                        for i, bridge in enumerate(bridge_details[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–∞–π–∑–µ—Ä–∞
                            riser_info = {
                                'slot': f'RISER_SLOT_{i+1}',
                                'populated': True,  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ—Å—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ –µ—Å—Ç—å —Ä–∞–π–∑–µ—Ä
                                'fru_product_name': f'Detected via PCI bridge ({bridge.split()[0]})',
                                'fru_manufacturer': 'Detected from PCI topology',
                                'fru_part_number': 'Unknown (no FRU data)',
                                'fru_serial_number': 'Not available via PCI',
                                'pcie_slots': [],
                                'detection_method': 'pci_topology'
                            }
                            risers.append(riser_info)
                            
                except Exception as e:
                    # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ PCI –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PCI —Ç–æ–ø–æ–ª–æ–≥–∏–∏: {type(e).__name__}: {e}")
                    pass
            
            # –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º placeholder
            if not risers:
                risers = [
                    {
                        'slot': 'RISER_SLOT_1',
                        'populated': False,
                        'fru_product_name': 'Not detected via FRU or PCI',
                        'fru_manufacturer': 'Unknown',
                        'fru_part_number': 'Unknown',
                        'fru_serial_number': 'Not available',
                        'pcie_slots': [],
                        'detection_method': 'placeholder'
                    }
                ]
            
            return risers
        
        current_config = {
            'scan_date': datetime.now().strftime('%Y-%m-%d'),
            'processors': cpu_info_func(),
            'memory_modules': memory_info_func(), 
            'pci_devices': pci_info_func(),
            'usb_devices': usb_info_func(),
            'storage_devices': storage_info_func(),
            'riser_cards': get_riser_info()
        }
        
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞:")
        print(f"‚îú‚îÄ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: {len(current_config['processors'])}")
        print(f"‚îú‚îÄ –ú–æ–¥—É–ª–∏ –ø–∞–º—è—Ç–∏: {len(current_config['memory_modules'])}")
        print(f"‚îú‚îÄ PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(current_config['pci_devices'])}")
        print(f"‚îú‚îÄ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(current_config['usb_devices'])}")
        print(f"‚îú‚îÄ –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏: {len(current_config['storage_devices'])}")
        print(f"‚îî‚îÄ –†–∞–π–∑–µ—Ä—ã: {len(current_config['riser_cards'])}")
        
        return current_config
    
    def compare_processors(self, current: List[Dict], baseline: List[Dict]) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ (CPU socket, id, cores, threads)"""
        diff_result = {
            'status': 'PASS',
            'differences': [],
            'summary': {},
            'details': {
                'current_count': len(current),
                'baseline_count': len(baseline),
                'socket_comparison': []
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        if len(current) != len(baseline):
            diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
            diff_result['differences'].append(
                f'CPU count mismatch: current={len(current)}, baseline={len(baseline)}'
            )
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–æ–∫–µ—Ç–∞–º
        baseline_by_socket = {cpu['socket']: cpu for cpu in baseline}
        current_by_socket = {cpu['socket']: cpu for cpu in current}
        
        for socket_name in set(baseline_by_socket.keys()) | set(current_by_socket.keys()):
            socket_diff = {'socket': socket_name}
            
            if socket_name not in current_by_socket:
                socket_diff['status'] = 'MISSING'
                socket_diff['issue'] = f'CPU socket {socket_name} missing in current system'
                diff_result['differences'].append(socket_diff['issue'])
                diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
                    
            elif socket_name not in baseline_by_socket:
                socket_diff['status'] = 'EXTRA'
                socket_diff['issue'] = f'Extra CPU socket {socket_name} in current system'
                diff_result['differences'].append(socket_diff['issue'])
                diff_result['status'] = self._escalate_status(diff_result['status'], 'WARNING')
                    
            else:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ CPU
                current_cpu = current_by_socket[socket_name]
                baseline_cpu = baseline_by_socket[socket_name]
                socket_diff['status'] = 'MATCH'
                
                # –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                if current_cpu.get('model') != baseline_cpu.get('model'):
                    socket_diff['model_diff'] = {
                        'current': current_cpu.get('model'),
                        'baseline': baseline_cpu.get('model')
                    }
                    diff_result['differences'].append(
                        f'CPU {socket_name} model mismatch: {current_cpu.get("model")} vs {baseline_cpu.get("model")}'
                    )
                    diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä
                if current_cpu.get('cores') != baseline_cpu.get('cores'):
                    # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ fallback –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'Unknown'
                    current_cores = current_cpu.get('cores')
                    baseline_cores = baseline_cpu.get('cores')
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã, –Ω–æ baseline –µ—Å—Ç—å - —ç—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –æ—à–∏–±–∫–∞
                    if current_cores == 'Unknown' and isinstance(baseline_cores, (int, str)) and baseline_cores != 'Unknown':
                        difference = {
                            'type': 'cores_detection_failed',
                            'description': f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU {socket_name} (fallback method)",
                            'current': current_cores,
                            'baseline': baseline_cores,
                            'severity': 'minor'
                        }
                        result['differences'].append(difference)
                        result['status'] = self._escalate_status(result['status'], 'WARNING')
                    # –ï—Å–ª–∏ –æ–±–∞ Unknown - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                    elif current_cores == 'Unknown' and baseline_cores == 'Unknown':
                        pass  # –û–±–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã - –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                    # –ï—Å–ª–∏ baseline Unknown, –∞ current –∏–∑–≤–µ—Å—Ç–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º baseline (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ)
                    elif baseline_cores == 'Unknown' and current_cores != 'Unknown':
                        pass  # –ù–µ —Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É
                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è - —Å–æ–∑–¥–∞–µ–º FAIL
                    else:
                        difference = {
                            'type': 'cores_mismatch',
                            'description': f"CPU {socket_name}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {current_cores} vs {baseline_cores}",
                            'current': current_cores,
                            'baseline': baseline_cores,
                            'severity': 'major'
                        }
                        result['differences'].append(difference)
                        result['status'] = self._escalate_status(result['status'], 'FAIL')
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
                if current_cpu.get('threads') != baseline_cpu.get('threads'):
                    socket_diff['threads_diff'] = {
                        'current': current_cpu.get('threads'),
                        'baseline': baseline_cpu.get('threads')
                    }
                    diff_result['differences'].append(
                        f'CPU {socket_name} threads mismatch: {current_cpu.get("threads")} vs {baseline_cpu.get("threads")}'
                    )
                    diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
            
            diff_result['details']['socket_comparison'].append(socket_diff)
        
        # –°–≤–æ–¥–∫–∞
        diff_result['summary'] = {
            'total_differences': len(diff_result['differences']),
            'cpu_sockets_current': len(current),
            'cpu_sockets_baseline': len(baseline),
            'status_description': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∞–ª–æ–Ω—É' if diff_result['status'] == 'PASS' else '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö'
        }
        
        return diff_result
    
    def compare_memory(self, current: List[Dict], baseline: List[Dict]) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        result = {
            'status': 'PASS',
            'differences': [],
            'summary': {
                'total_differences': 0,
                'memory_slots_populated_current': 0,
                'memory_slots_populated_baseline': 0,
                'total_memory_current_gb': 0,
                'total_memory_baseline_gb': 0,
                'status_description': ''
            },
            'details': {
                'current_slots': 0,
                'baseline_slots': 0,
                'slot_comparison': []
            }
        }
        
        def parse_memory_size(size_str: str) -> int:
            """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏ –≤ GB"""
            if not size_str or size_str == 'No Module Installed':
                return 0
            try:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                size_str = size_str.strip().upper()
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ GB
                if size_str.endswith(' GB'):
                    return int(size_str.replace(' GB', ''))
                elif size_str.endswith('GB'):
                    return int(size_str.replace('GB', ''))
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ MB, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB
                elif size_str.endswith(' MB'):
                    mb_value = int(size_str.replace(' MB', ''))
                    return mb_value // 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MB –≤ GB
                elif size_str.endswith('MB'):
                    mb_value = int(size_str.replace('MB', ''))
                    return mb_value // 1024
                # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ GB
                elif size_str.isdigit():
                    return int(size_str)
                else:
                    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    import re
                    numbers = re.findall(r'\d+', size_str)
                    if numbers:
                        return int(numbers[0])
                    return 0
            except (ValueError, IndexError) as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏ '{size_str}': {e}")
                return 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        for dimm in current:
            if dimm.get('populated', False):
                result['summary']['memory_slots_populated_current'] += 1
                size_gb = parse_memory_size(dimm.get('size', ''))
                result['summary']['total_memory_current_gb'] += size_gb
        
        for dimm in baseline:
            if dimm.get('populated', False):
                result['summary']['memory_slots_populated_baseline'] += 1
                size_gb = parse_memory_size(dimm.get('size', ''))
                result['summary']['total_memory_baseline_gb'] += size_gb
        
        result['details']['current_slots'] = result['summary']['total_memory_current_gb']
        result['details']['baseline_slots'] = result['summary']['total_memory_baseline_gb']
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        if result['summary']['memory_slots_populated_current'] != result['summary']['memory_slots_populated_baseline']:
            difference = {
                'type': 'slot_count_mismatch',
                'description': f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–∞–º—è—Ç–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {result['summary']['memory_slots_populated_current']} vs {result['summary']['memory_slots_populated_baseline']}",
                'severity': 'warning'
            }
            result['differences'].append(difference)
            result['status'] = self._escalate_status(result['status'], 'WARNING')
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—â–∏–π –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏
        if result['summary']['total_memory_current_gb'] != result['summary']['total_memory_baseline_gb']:
            difference = {
                'type': 'total_memory_mismatch',
                'description': f"–û–±—â–∏–π –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è: {result['summary']['total_memory_current_gb']}GB vs {result['summary']['total_memory_baseline_gb']}GB",
                'severity': 'major'
            }
            result['differences'].append(difference)
            result['status'] = self._escalate_status(result['status'], 'FAIL')
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
        current_slots = {dimm.get('slot'): dimm for dimm in current}
        baseline_slots = {dimm.get('slot'): dimm for dimm in baseline}
        
        all_slots = set(current_slots.keys()) | set(baseline_slots.keys())
        
        for slot in sorted(all_slots):
            current_dimm = current_slots.get(slot, {})
            baseline_dimm = baseline_slots.get(slot, {})
            
            current_populated = current_dimm.get('populated', False)
            baseline_populated = baseline_dimm.get('populated', False)
            
            if current_populated == baseline_populated:
                if current_populated:
                    result['details']['slot_comparison'].append({
                        'slot': slot,
                        'status': 'POPULATED'
                    })
                else:
                    result['details']['slot_comparison'].append({
                        'slot': slot,
                        'status': 'EMPTY'
                    })
            else:
                # –°–ª–æ—Ç –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞—Å–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏
                if current_populated:
                    status_text = 'ADDED'
                else:
                    status_text = 'REMOVED'
                
                result['details']['slot_comparison'].append({
                    'slot': slot,
                    'status': status_text
                })
                
                difference = {
                    'type': 'slot_population_change',
                    'slot': slot,
                    'description': f"–°–ª–æ—Ç {slot}: {status_text}",
                    'severity': 'minor'
                }
                result['differences'].append(difference)
                result['status'] = self._escalate_status(result['status'], 'WARNING')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        result['summary']['total_differences'] = len(result['differences'])
        
        if result['status'] == 'PASS':
            result['summary']['status_description'] = '–ü–∞–º—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É'
        elif result['status'] == 'WARNING':
            result['summary']['status_description'] = '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏'
        else:
            result['summary']['status_description'] = '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏'
        
        return result
    
    def compare_pci_devices(self, current: List[Dict], baseline: List[Dict]) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (BDF, device, class, width, speed)"""
        diff_result = {
            'status': 'PASS',
            'differences': [],
            'summary': {},
            'details': {
                'current_count': len(current),
                'baseline_count': len(baseline),
                'critical_devices_check': [],
                'device_comparison': []
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –ø–æ BDF –∞–¥—Ä–µ—Å–∞–º
        baseline_by_bdf = {dev['bdf']: dev for dev in baseline}
        current_by_bdf = {dev['bdf']: dev for dev in current}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        critical_classes = {
            'Host bridge', 'PCI bridge', 'ISA bridge', 'Ethernet controller', 
            'USB controller', 'SATA controller', 'System peripheral'
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ class –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –∏ –∫–æ–¥–æ–≤
        def clean_device_class(device_class: str) -> str:
            """–û—á–∏—â–∞–µ—Ç class –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ —Ç–∏–ø–∞ [0200] –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
            if not device_class:
                return 'Unknown'
            # –£–±–∏—Ä–∞–µ–º –≤—Å—ë —á—Ç–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö: "Ethernet controller [0200]" -> "Ethernet controller"
            return device_class.split(' [')[0].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º clean_device_class –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
        baseline_critical = {
            bdf: dev for bdf, dev in baseline_by_bdf.items() 
            if any(cls in clean_device_class(dev.get('class', '')) for cls in critical_classes)
        }
        current_critical = {
            bdf: dev for bdf, dev in current_by_bdf.items() 
            if any(cls in clean_device_class(dev.get('class', '')) for cls in critical_classes)
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º clean_device_class
        baseline_by_class = {}
        for dev in baseline_critical.values():
            dev_class = clean_device_class(dev.get('class', 'Unknown'))
            if dev_class not in baseline_by_class:
                baseline_by_class[dev_class] = []
            baseline_by_class[dev_class].append(dev)
        
        current_by_class = {}
        for dev in current_critical.values():
            dev_class = clean_device_class(dev.get('class', 'Unknown'))
            if dev_class not in current_by_class:
                current_by_class[dev_class] = []
            current_by_class[dev_class].append(dev)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
        for dev_class in baseline_by_class:
            baseline_count = len(baseline_by_class[dev_class])
            current_count = len(current_by_class.get(dev_class, []))
            
            class_check = {
                'class': dev_class,
                'baseline_count': baseline_count,
                'current_count': current_count,
                'status': 'MATCH' if baseline_count == current_count else 'MISMATCH'
            }
            
            if baseline_count != current_count:
                class_check['issue'] = f'{dev_class}: expected {baseline_count}, found {current_count}'
                diff_result['differences'].append(class_check['issue'])
                diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
            
            diff_result['details']['critical_devices_check'].append(class_check)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for dev_class in current_by_class:
            if dev_class not in baseline_by_class:
                class_check = {
                    'class': dev_class,
                    'baseline_count': 0,
                    'current_count': len(current_by_class[dev_class]),
                    'status': 'NEW',
                    'issue': f'New device class detected: {dev_class}'
                }
                diff_result['differences'].append(class_check['issue'])
                diff_result['status'] = self._escalate_status(diff_result['status'], 'WARNING')
                diff_result['details']['critical_devices_check'].append(class_check)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö BDF –∞–¥—Ä–µ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
        for bdf in set(baseline_critical.keys()) | set(current_critical.keys()):
            device_diff = {'bdf': bdf}
            
            if bdf not in current_by_bdf:
                device_diff['status'] = 'MISSING'
                device_diff['issue'] = f'Critical device {bdf} missing'
                diff_result['differences'].append(device_diff['issue'])
                diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
                    
            elif bdf not in baseline_by_bdf:
                device_diff['status'] = 'EXTRA'
                device_diff['description'] = current_by_bdf[bdf].get('description', 'Unknown')
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                    
            else:
                current_dev = current_by_bdf[bdf]
                baseline_dev = baseline_by_bdf[bdf]
                device_diff['status'] = 'PRESENT'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if current_dev.get('description') != baseline_dev.get('description'):
                    device_diff['description_diff'] = {
                        'current': current_dev.get('description'),
                        'baseline': baseline_dev.get('description')
                    }
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º clean_device_class –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                    baseline_clean_class = clean_device_class(baseline_dev.get('class', ''))
                    if any(cls in baseline_clean_class for cls in ['Ethernet controller', 'USB controller']):
                        diff_result['differences'].append(
                            f'Critical device {bdf} description changed: {current_dev.get("description")} vs {baseline_dev.get("description")}'
                        )
                        diff_result['status'] = self._escalate_status(diff_result['status'], 'WARNING')
            
            if device_diff.get('status') in ['MISSING', 'EXTRA', 'PRESENT']:
                diff_result['details']['device_comparison'].append(device_diff)
        
        # –°–≤–æ–¥–∫–∞
        diff_result['summary'] = {
            'total_differences': len(diff_result['differences']),
            'pci_devices_current': len(current),
            'pci_devices_baseline': len(baseline),
            'critical_devices_current': len(current_critical),
            'critical_devices_baseline': len(baseline_critical),
            'status_description': 'PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∞–ª–æ–Ω—É' if diff_result['status'] == 'PASS' else '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö'
        }
        
        return diff_result
    
    def compare_usb_devices(self, current: List[Dict], baseline: List[Dict]) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (bus, dev, VID:PID)"""
        diff_result = {
            'status': 'PASS',
            'differences': [],
            'summary': {},
            'details': {
                'current_count': len(current),
                'baseline_count': len(baseline),
                'hub_comparison': [],
                'device_comparison': []
            }
        }
        
        # –°–ø–∏—Å–æ–∫ VID:PID —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (KVM, temporary devices)
        IGNORABLE_DEVICES = {
            '0557:8021',  # ATEN KVM Hub
            '046b:ff01',  # AMI Virtual Hub
            '046b:ff20',  # AMI Virtual CDROM
            '046b:ff31',  # AMI Virtual HDisk
            '046b:ff10',  # AMI Virtual Keyboard/Mouse
            '046b:ffb0',  # AMI Virtual Ethernet
            '0557:223a'   # ATEN CS1316 KVM Switch
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º USB —Ö–∞–±—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
        def is_critical_usb(device):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
            description = device.get('description', '').lower()
            vendor = device.get('vendor', '').lower()
            
            # USB —Ö–∞–±—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã - –∫—Ä–∏—Ç–∏—á–Ω—ã–µ
            if any(keyword in description for keyword in [
                'hub', 'root hub', 'host controller', 'xhci', 'ehci', 'ohci', 'uhci'
            ]):
                return True
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if any(keyword in description for keyword in [
                'keyboard', 'mouse', 'management', 'controller'
            ]):
                return True
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –≤–µ–Ω–¥–æ—Ä—ã
            if any(vendor_name in vendor for vendor_name in [
                'intel', 'amd', 'via', 'nvidia'
            ]):
                return True
            
            return False
        
        baseline_critical = [dev for dev in baseline if is_critical_usb(dev)]
        current_critical = [dev for dev in current if is_critical_usb(dev)]
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º USB —Ö–∞–±—ã –ø–æ VID:PID
        baseline_hubs_by_vid_pid = {}
        for dev in baseline_critical:
            vid_pid = dev.get('vid_pid', '')
            if vid_pid not in baseline_hubs_by_vid_pid:
                baseline_hubs_by_vid_pid[vid_pid] = []
            baseline_hubs_by_vid_pid[vid_pid].append(dev)
        
        current_hubs_by_vid_pid = {}
        for dev in current_critical:
            vid_pid = dev.get('vid_pid', '')
            if vid_pid not in current_hubs_by_vid_pid:
                current_hubs_by_vid_pid[vid_pid] = []
            current_hubs_by_vid_pid[vid_pid].append(dev)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for vid_pid in set(baseline_hubs_by_vid_pid.keys()) | set(current_hubs_by_vid_pid.keys()):
            baseline_count = len(baseline_hubs_by_vid_pid.get(vid_pid, []))
            current_count = len(current_hubs_by_vid_pid.get(vid_pid, []))
            
            hub_check = {
                'vid_pid': vid_pid,
                'baseline_count': baseline_count,
                'current_count': current_count,
                'status': 'MATCH' if baseline_count == current_count else 'MISMATCH'
            }
            
            if baseline_count != current_count:
                if baseline_count > 0:
                    baseline_desc = baseline_hubs_by_vid_pid[vid_pid][0].get('description', vid_pid)
                else:
                    baseline_desc = 'Unknown'
                    
                hub_check['issue'] = f'USB device {vid_pid} ({baseline_desc}): expected {baseline_count}, found {current_count}'
                diff_result['differences'].append(hub_check['issue'])
                
                # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - FAIL
                if baseline_count > current_count:
                    diff_result['status'] = self._escalate_status(diff_result['status'], 'FAIL')
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - WARNING
                elif current_count > baseline_count:
                    diff_result['status'] = self._escalate_status(diff_result['status'], 'WARNING')
            
            diff_result['details']['hub_comparison'].append(hub_check)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ –æ—Ç—á–µ—Ç
        ignored_devices = []
        for device in current:
            if device.get('vid_pid') in IGNORABLE_DEVICES:
                ignored_devices.append(device)
        
        if ignored_devices:
            diff_result['details']['ignored_devices'] = ignored_devices
            diff_result['details']['ignored_count'] = len(ignored_devices)
        
        # –°–≤–æ–¥–∫–∞
        diff_result['summary'] = {
            'total_differences': len(diff_result['differences']),
            'usb_devices_current': len(current),
            'usb_devices_baseline': len(baseline),
            'critical_usb_current': len(current_critical),
            'critical_usb_baseline': len(baseline_critical),
            'ignored_devices_count': len(ignored_devices) if ignored_devices else 0,
            'status_description': 'USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∞–ª–æ–Ω—É' if diff_result['status'] == 'PASS' else '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö'
        }
        
        return diff_result
    
    def compare_storage_devices(self, current: List[Dict], baseline: List[Dict]) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏—Å–∫–∏ BMC
        def filter_virtual_devices(devices):
            filtered = []
            for device in devices:
                model = device.get('model', '').lower()
                # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏—Å–∫–∏ BMC
                if 'virtual hdisk' not in model and 'ami virtual' not in model:
                    filtered.append(device)
            return filtered
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        current_filtered = filter_virtual_devices(current)
        baseline_filtered = filter_virtual_devices(baseline)
        
        def group_by_type(devices):
            """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
            groups = {
                'nvme': [],
                'sata': [], 
                'sas': [],
                'mmc': [],
                'usb': [],
                'raid': [],
                'other': []
            }
            
            for device in devices:
                device_name = device.get('device', '').lower()
                model = device.get('model', '').lower()
                transport = device.get('transport', '').lower()
                
                # NVMe —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if device_name.startswith('nvme') or 'nvme' in model:
                    groups['nvme'].append(device)
                # SAS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É)
                elif 'sas' in model or 'sas' in transport or any(sas_vendor in model for sas_vendor in ['seagate', 'hitachi', 'toshiba']) and 'sas' in model:
                    groups['sas'].append(device)
                # RAID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏—Å–∫–∏
                elif any(raid_keyword in model for raid_keyword in ['raid', 'logical', 'virtual', 'megaraid', 'adaptec']):
                    groups['raid'].append(device)
                # SATA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤–∫–ª—é—á–∞—è SATA SSD)
                elif (device_name.startswith('sd') and 
                      any(sata_keyword in model for sata_keyword in ['sata', 'ata', 'ssd']) or 
                      'sata' in transport):
                    groups['sata'].append(device)
                # eMMC/MMC —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                elif device_name.startswith('mmcblk') or 'mmc' in model:
                    groups['mmc'].append(device)
                # USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                elif 'usb' in transport or 'usb' in model:
                    groups['usb'].append(device)
                # SCSI –¥–∏—Å–∫–∏ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ç–∏–ø–∞ - –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É/–º–æ–¥–µ–ª–∏
                elif device_name.startswith('sd'):
                    # –ï—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–æ–π –¥–∏—Å–∫ (>100GB) –∏ –Ω–µ SSD - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ SAS
                    try:
                        size_str = device.get('size', '0')
                        if 'GB' in size_str:
                            size_gb = float(size_str.replace('GB', '').strip())
                            if size_gb > 100 and 'ssd' not in model:
                                groups['sas'].append(device)
                            else:
                                groups['sata'].append(device)
                        else:
                            groups['sata'].append(device)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SATA
                    except (ValueError, TypeError):
                        groups['sata'].append(device)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SATA –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                else:
                    groups['other'].append(device)
            
            return groups
        
        current_by_type = group_by_type(current_filtered)
        baseline_by_type = group_by_type(baseline_filtered)
        
        differences = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        all_types = set(current_by_type.keys()) | set(baseline_by_type.keys())
        
        for storage_type in all_types:
            current_devices = current_by_type.get(storage_type, [])
            baseline_devices = baseline_by_type.get(storage_type, [])
            
            if len(current_devices) != len(baseline_devices):
                differences.append(
                    f"{storage_type.upper()} count mismatch: "
                    f"current={len(current_devices)}, baseline={len(baseline_devices)}"
                )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è zip –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –ª–∏—à–Ω–∏—Ö
            max_devices = max(len(current_devices), len(baseline_devices))
            for i in range(max_devices):
                curr = current_devices[i] if i < len(current_devices) else None
                base = baseline_devices[i] if i < len(baseline_devices) else None
                
                if curr is None:
                    differences.append(
                        f"{storage_type.upper()} {i+1}: missing in current (baseline has '{base.get('model', 'Unknown')}')"
                    )
                elif base is None:
                    differences.append(
                        f"{storage_type.upper()} {i+1}: extra in current ('{curr.get('model', 'Unknown')}')"
                    )
                else:
                    curr_model = curr.get('model', 'Unknown')
                    base_model = base.get('model', 'Unknown')
                    
                    if curr_model != base_model:
                        differences.append(
                            f"{storage_type.upper()} {i+1} model mismatch: "
                            f"current='{curr_model}', baseline='{base_model}'"
                        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–¥–∏–º—Å—è —á—Ç–æ status –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        status = 'PASS' if not differences else 'FAIL'
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        virtual_devices_current = len(current) - len(current_filtered)
        virtual_devices_baseline = len(baseline) - len(baseline_filtered)
        
        return {
            'component': 'storage_devices',
            'status': status,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: status –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            'current_count': len(current_filtered),
            'baseline_count': len(baseline_filtered),
            'current_by_type': {k: len(v) for k, v in current_by_type.items()},
            'baseline_by_type': {k: len(v) for k, v in baseline_by_type.items()},
            'virtual_devices_filtered': {
                'current': virtual_devices_current,
                'baseline': virtual_devices_baseline
            },
            'differences': differences
        }

    def compare_riser_cards(self, current: List[Dict], baseline: List[Dict]) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–π–∑–µ—Ä–æ–≤ (FRU –ø—Ä–æ–≤–µ—Ä–∫–∞) —Å–æ–≥–ª–∞—Å–Ω–æ TRD 4.2.6.3.6"""
        differences = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ—Ç–∞–º
        current_by_slot = {riser.get('slot', ''): riser for riser in current}
        baseline_by_slot = {riser.get('slot', ''): riser for riser in baseline}
        
        all_slots = set(current_by_slot.keys()) | set(baseline_by_slot.keys())
        
        populated_current = 0
        populated_baseline = 0
        
        for slot in sorted(all_slots):
            current_riser = current_by_slot.get(slot)
            baseline_riser = baseline_by_slot.get(slot)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–π–∑–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ
            if current_riser is None:
                differences.append(f"Slot {slot}: Missing in current configuration")
                continue
            elif baseline_riser is None:
                differences.append(f"Slot {slot}: Extra riser found (not in baseline)")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            curr_populated = current_riser.get('populated', False)
            base_populated = baseline_riser.get('populated', False)
            
            if curr_populated:
                populated_current += 1
            if base_populated:
                populated_baseline += 1
            
            if curr_populated != base_populated:
                differences.append(
                    f"Slot {slot}: Population status mismatch - "
                    f"current={'populated' if curr_populated else 'empty'}, "
                    f"baseline={'populated' if base_populated else 'empty'}"
                )
                continue
            
            # –ï—Å–ª–∏ —Ä–∞–π–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–±–µ–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º FRU –¥–∞–Ω–Ω—ã–µ
            if curr_populated and base_populated:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ FRU Product Name
                curr_product = current_riser.get('fru_product_name', '')
                base_product = baseline_riser.get('fru_product_name', '')
                if curr_product != base_product:
                    differences.append(
                        f"Slot {slot}: FRU Product Name mismatch - "
                        f"current='{curr_product}', baseline='{base_product}'"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ FRU Manufacturer
                curr_manufacturer = current_riser.get('fru_manufacturer', '')
                base_manufacturer = baseline_riser.get('fru_manufacturer', '')
                if curr_manufacturer != base_manufacturer:
                    differences.append(
                        f"Slot {slot}: FRU Manufacturer mismatch - "
                        f"current='{curr_manufacturer}', baseline='{base_manufacturer}'"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ FRU Part Number
                curr_part = current_riser.get('fru_part_number', '')
                base_part = baseline_riser.get('fru_part_number', '')
                if curr_part != base_part:
                    differences.append(
                        f"Slot {slot}: FRU Part Number mismatch - "
                        f"current='{curr_part}', baseline='{base_part}'"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
                curr_serial = current_riser.get('fru_serial_number', '')
                if not curr_serial or curr_serial == 'Required':
                    differences.append(
                        f"Slot {slot}: FRU Serial Number missing or invalid - "
                        f"current='{curr_serial}'"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ PCIe —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Ä–∞–π–∑–µ—Ä–µ
                curr_pcie_slots = current_riser.get('pcie_slots', [])
                base_pcie_slots = baseline_riser.get('pcie_slots', [])
                
                if len(curr_pcie_slots) != len(base_pcie_slots):
                    differences.append(
                        f"Slot {slot}: PCIe slots count mismatch - "
                        f"current={len(curr_pcie_slots)}, baseline={len(base_pcie_slots)}"
                    )
        
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        if populated_current != populated_baseline:
            differences.append(
                f"Total populated risers mismatch: "
                f"current={populated_current}, baseline={populated_baseline}"
            )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∏–π
        critical_differences = []
        for diff in differences:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏
            if any(keyword in diff.lower() for keyword in [
                'missing in current', 'fru serial number missing', 
                'populated risers mismatch', 'population status mismatch'
            ]):
                critical_differences.append(diff)
        
        if critical_differences:
            status = 'FAIL'
        elif differences:
            status = 'WARNING'  
        else:
            status = 'PASS'
        
        return {
            'component': 'riser_cards',
            'status': status,
            'current_populated': populated_current,
            'baseline_populated': populated_baseline,
            'current_slots': len(current),
            'baseline_slots': len(baseline),
            'differences': differences,
            'critical_differences': critical_differences
        }
    
    def perform_full_diff(self) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–æ–º"""
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        current_config = self.collect_current_config()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        print("‚îú‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...")
        cpu_diff = self.compare_processors(
            current_config['processors'], 
            self.baseline_config['processors']
        )
        
        print("‚îú‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏...")
        memory_diff = self.compare_memory(
            current_config['memory_modules'], 
            self.baseline_config['memory_modules']
        )
        
        print("‚îú‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        pci_diff = self.compare_pci_devices(
            current_config['pci_devices'], 
            self.baseline_config['pci_devices']
        )
        
        print("‚îú‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        usb_diff = self.compare_usb_devices(
            current_config['usb_devices'], 
            self.baseline_config['usb_devices']
        )
        
        print("‚îî‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π...")
        storage_result = self.compare_storage_devices(
            current_config['storage_devices'], 
            self.baseline_config['storage_devices']
        )
        
        # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–π–∑–µ—Ä–æ–≤ (TRD 4.2.6.3.6)
        print("‚îú‚îÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–π–∑–µ—Ä–æ–≤...")
        riser_result = self.compare_riser_cards(
            current_config['riser_cards'],
            self.baseline_config['riser_cards']
        )
        
        print("‚îî‚îÄ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        all_statuses = [
            cpu_diff['status'], memory_diff['status'], pci_diff['status'],
            usb_diff['status'], storage_result['status'], riser_result['status']
        ]
        
        if 'FAIL' in all_statuses:
            self.overall_status = 'FAIL'
        elif 'WARNING' in all_statuses:
            self.overall_status = 'WARNING'
        else:
            self.overall_status = 'PASS'
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç differences –∫–∞–∫ —Å–ø–∏—Å–æ–∫
        total_differences = 0
        for result in [cpu_diff, memory_diff, pci_diff, usb_diff, storage_result, riser_result]:
            differences = result.get('differences', [])
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ differences –≤—Å–µ–≥–¥–∞ —Å–ø–∏—Å–æ–∫
            if isinstance(differences, list):
                total_differences += len(differences)
            elif isinstance(differences, dict):
                # –î–ª—è compatibility —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º - —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –≤ dict
                for diff_list in differences.values():
                    if isinstance(diff_list, list):
                        total_differences += len(diff_list)
                    else:
                        # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–¥–Ω–æ —Ä–∞–∑–ª–∏—á–∏–µ –µ—Å–ª–∏ –Ω–µ —Å–ø–∏—Å–æ–∫
                        total_differences += 1
            else:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–¥–Ω–æ —Ä–∞–∑–ª–∏—á–∏–µ
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç differences –≤ {result.get('component', 'unknown')}: {type(differences)}")
                total_differences += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.diff_results = {
            'scan_info': {
                'baseline_date': self.baseline_config.get('baseline_date', 'Unknown'),
                'current_scan_date': current_config['scan_date'],
                'comparison_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            },
            'overall_status': self.overall_status,
            'component_results': {
                'processors': cpu_diff,
                'memory': memory_diff,
                'pci_devices': pci_diff,
                'usb_devices': usb_diff,
                'storage_devices': storage_result,
                'riser_cards': riser_result
            },
            'summary': {
                'total_components_checked': len([s for s in all_statuses if s != 'UNKNOWN']),
                'components_passed': sum(1 for s in all_statuses if s == 'PASS'),
                'components_warning': sum(1 for s in all_statuses if s == 'WARNING'),
                'components_failed': sum(1 for s in all_statuses if s == 'FAIL'),
                'total_differences': total_differences
            },
            'current_config': current_config
        }
        
        return self.diff_results
    
    def save_diff_report(self, output_path: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö"""
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        with output_file.open('w', encoding='utf-8') as f:
            json.dump(self.diff_results, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –û—Ç—á–µ—Ç HW-Diff —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

    def _escalate_status(self, current_status: str, new_status: str) -> str:
        """
        –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (PASS < WARNING < FAIL < ERROR)
        
        Args:
            current_status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            –°—Ç–∞—Ç—É—Å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        """
        current_priority = self.STATUS_PRIORITY.get(current_status, 0)
        new_priority = self.STATUS_PRIORITY.get(new_status, 0)
        
        if new_priority > current_priority:
            return new_status
        return current_status

if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
    print("–ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  from hw_diff_module import HardwareDiff")
    print("  hw_diff = HardwareDiff('baseline.json')")
    print("  results = hw_diff.perform_full_diff()")
    print("  hw_diff.save_diff_report('diff_report.json')") 