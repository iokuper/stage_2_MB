#!/usr/bin/env python3
"""orion_stage2.py
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Stage‚Äë2 –¥–ª—è –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã RSMB‚ÄëMS93‚ÄëFS0.
–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ PXE‚Äë–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π Linux‚Äë—Å—Ä–µ–¥–µ –Ω–∞ HOST,
–∞ –¥–æ—Å—Ç—É–ø –∫ BMC –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ IPMI (lanplus) –∏ Redfish.

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ:
  ‚Ä¢ agent.conf ‚Äì JSON —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–µ–Ω–¥–∞ (–≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏).
  ‚Ä¢ reference/‚Ä¶ ‚Äì —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (QVL, inventory, sensors) –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
–°–∫—Ä–∏–ø—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —à–∞–≥–∏ 0‚Äì10 –∏–∑ –ø–ª–∞–Ω–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π JSON‚Äë–æ—Ç—á—ë—Ç.
"""

import subprocess
import json
import os
import sys
import time
import datetime as dt
from datetime import timezone
import shutil
import glob
import re
from pathlib import Path
from typing import Dict, List, Any, Optional, Iterable
import secrets
import random

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è HW-Diff
try:
    from hw_diff_module import HardwareDiff
    HW_DIFF_AVAILABLE = True
except ImportError:
    HW_DIFF_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤
try:
    from sensor_validator import SensorValidator
    SENSOR_VALIDATOR_AVAILABLE = True
except ImportError:
    SENSOR_VALIDATOR_AVAILABLE = False

CONF_PATH = Path(__file__).parent / 'agent.conf'
REF_ROOT  = Path(__file__).parent / 'reference'

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ FRU –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ª–æ–≥–æ–≤
def get_serial_from_fru(conf):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ FRU –¥–∞–Ω–Ω—ã—Ö BMC"""
    try:
        result = subprocess.run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                               '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                               'fru', 'print', '1'], capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            for line in result.stdout.splitlines():
                if 'Product Serial' in line:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É "Product Serial        : GOG4NG221A0030"
                    serial = line.split(':')[1].strip()
                    return serial if serial and serial != 'UNKNOWN_SERIAL' else 'UNKNOWN_SERIAL'
        return 'UNKNOWN_SERIAL'
    except (subprocess.TimeoutExpired, subprocess.CalledProcessError, json.JSONDecodeError, KeyError) as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: {type(e).__name__}: {e}")
        return 'UNKNOWN_SERIAL'

# LOG_ROOT –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main() –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
LOG_ROOT = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ main()

RESULT_JSON = {
    'serial'   : None,
    'stage'    : '2',
    'start'    : dt.datetime.now(timezone.utc).isoformat(),
    'results'  : {},
    'warnings' : [],
    'logs'     : {}
}

# ---------- utility helpers -------------------------------------------------

def print_step(step_name: str, status: str = "START"):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ"""
    timestamp = dt.datetime.now(timezone.utc).strftime('%H:%M:%S')
    if status == "START":
        print(f"[{timestamp}] üîÑ {step_name}...")
    elif status == "PASS":
        print(f"[{timestamp}] ‚úÖ {step_name} - PASS")
    elif status == "FAIL":
        print(f"[{timestamp}] ‚ùå {step_name} - FAIL")
    elif status == "WARNING":
        print(f"[{timestamp}] ‚ö†Ô∏è  {step_name} - WARNING")
    sys.stdout.flush()

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    tools = [
        'ipmitool', 'dmidecode', 'lshw', 'lspci', 'lsusb', 'lsblk',
        'stress-ng', 'hdparm', 'smartctl', 'fio', 'ethtool', 'i2cdetect'
    ]
    
    missing = []
    for tool in tools:
        if not shutil.which(tool):
            missing.append(tool)
    
    if missing:
        raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(missing)}")
    
    print("‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")

def get_primary_network_interface():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        result = subprocess.run(['ip', 'route', 'show', 'default'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if 'dev' in line:
                    parts = line.split()
                    dev_idx = parts.index('dev')
                    if dev_idx + 1 < len(parts):
                        return parts[dev_idx + 1]
        # Fallback –∫ eth0
        return 'eth0'
    except (subprocess.TimeoutExpired, subprocess.CalledProcessError, IndexError, ValueError) as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {type(e).__name__}: {e}")
        return 'eth0'

def run(cmd: List[str],
        log_file: Path,
        timeout: int = 300,
        accept_rc: Optional[Iterable[int]] = None) -> str:
    """Run shell command, capture stdout+stderr, write to log_file, return stdout."""
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è accept_rc
    if accept_rc is None:
        accept_rc = (0,)
    else:
        accept_rc = tuple(accept_rc)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π tuple
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º proc –ø–µ—Ä–µ–¥ try –±–ª–æ–∫–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è UnboundLocalError
    proc = None
    
    try:
        # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        cmd_str = ' '.join(cmd)
        cmd_str = re.sub(r'(-P\s+)(\S+)', r'\1******', cmd_str)
        cmd_str = re.sub(r'(-p\s+)(\S+)', r'\1******', cmd_str)
        cmd_str = re.sub(r'(password[=:]\s*)(\S+)', r'\1******', cmd_str)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ª–æ–≥
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f">>> {cmd_str}\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
                               text=True, encoding='utf-8', errors='replace')
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å timeout
        stdout, _ = proc.communicate(timeout=timeout)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(stdout)
            f.write('\n')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if proc.returncode not in accept_rc:
            raise RuntimeError(f"Command {cmd_str} exit {proc.returncode}, see {log_file}")
        
        return stdout.strip()
        
    except subprocess.TimeoutExpired:
        if proc is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ proc –±—ã–ª —Å–æ–∑–¥–∞–Ω
            proc.kill()
            try:
                proc.communicate(timeout=5)  # –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            except subprocess.TimeoutExpired:
                proc.terminate()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        raise RuntimeError(f"Command {' '.join(cmd)} timed out after {timeout}s")
    except FileNotFoundError as e:
        raise RuntimeError(f"Command not found: {cmd[0]}. Error: {e}")
    except Exception as e:
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f"ERROR: {e}\n")
        raise

def load_json(path: Path) -> Any:
    """–ó–∞–≥—Ä—É–∑–∫–∞ JSON —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    if not path.exists():
        raise FileNotFoundError(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}')
    try:
        with path.open('r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        raise ValueError(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON {path}: {e}')

# ---------- step implementations -------------------------------------------

def step_init(conf: Dict[str, Any]) -> None:
    """–®–∞–≥ 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ BMC –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ HOST"""
    print_step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "START")
    log = LOG_ROOT / 'init.log'
    bmc_ip = conf['bmc_ip']
    run(['ping', '-c', '3', bmc_ip], log)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ running
    run(['systemctl', 'is-system-running'], log, accept_rc=[0, 1])  # degraded –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
    RESULT_JSON['results']['init'] = {'status': 'PASS'}
    print_step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "PASS")

def step_bmc_fw(conf, qvl):
    """–®–∞–≥ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏ BMC"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BMC", "START")
    log = LOG_ROOT / 'bmc_fw.log'
    try:
        out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                   '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                   'mc', 'info'], log)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏
        ver_line = next((l for l in out.splitlines() if 'Firmware Revision' in l), '')
        if not ver_line:
            current = 'unknown'
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'Firmware Revision' –≤ –≤—ã–≤–æ–¥–µ ipmitool")
        else:
            # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –±–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            parts = ver_line.split(':', 1)
            current = parts[1].strip() if len(parts) > 1 else 'unknown'
        
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è BMC: {current}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        if 'bmc' not in qvl or 'latest' not in qvl['bmc']:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BMC –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            RESULT_JSON['results']['bmc_fw'] = {
                'status': 'SKIP',
                'details': f'current: {current}, expected: not configured'
            }
            print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BMC", "SKIP")
            return
            
        expected = qvl['bmc']['latest']
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è BMC: {expected}")
        
        if current != expected:
            RESULT_JSON['results']['bmc_fw'] = {
                'status': 'FAIL',
                'details': f'current: {current}, expected: {expected}'
            }
            print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BMC", "FAIL")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            print(f"–û—à–∏–±–∫–∞: –í–µ—Ä—Å–∏—è BMC –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
        else:
            RESULT_JSON['results']['bmc_fw'] = {'status': 'PASS'}
            print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BMC", "PASS")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ BMC: {e}")
        RESULT_JSON['results']['bmc_fw'] = {
            'status': 'ERROR',
            'details': f'error: {str(e)}'
        }
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BMC", "ERROR")

def step_bios_fw(conf, qvl):
    """–®–∞–≥ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ BIOS"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BIOS", "START")
    log = LOG_ROOT / 'bios_fw.log'
    try:
        out = run(['dmidecode', '-t', '0'], log, timeout=120)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Å–∏–∏ BIOS
        ver_line = next((l for l in out.splitlines() if 'Version:' in l), '')
        if not ver_line:
            current = 'unknown'
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'Version:' –≤ –≤—ã–≤–æ–¥–µ dmidecode")
        else:
            current = ver_line.split(':', 1)[1].strip() if ':' in ver_line else 'unknown'
        
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è BIOS: {current}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        if 'bios' not in qvl or 'latest' not in qvl['bios']:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BIOS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            RESULT_JSON['results']['bios_fw'] = {
                'status': 'SKIP',
                'details': {'current': current, 'expected': 'not configured'}
            }
            print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BIOS", "SKIP")
            return
            
        expected = qvl['bios']['latest']
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è BIOS: {expected}")
        
        status = 'PASS' if current == expected else 'FAIL'
        RESULT_JSON['results']['bios_fw'] = {
            'status': status,
            'details': {'current': current, 'expected': expected}
        }
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BIOS", status)
        
        if status == 'FAIL':
            print(f"–û—à–∏–±–∫–∞: –í–µ—Ä—Å–∏—è BIOS –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ BIOS: {e}")
        RESULT_JSON['results']['bios_fw'] = {
            'status': 'ERROR',
            'details': {'current': 'error', 'expected': 'unknown', 'error': str(e)}
        }
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ BIOS", "ERROR")

def check_memory_configuration(dimm_data: List[Dict]) -> Dict:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º"""
    results = {
        'total_slots': len(dimm_data),
        'populated_slots': 0,
        'empty_slots': 0,
        'slot_details': {},
        'memory_channels': {},
        'total_memory_gb': 0,
        'warnings': []
    }
    
    for i, dimm in enumerate(dimm_data):
        slot_name = f"DIMM{i}"
        size = dimm.get('Size', 'No Module Installed')
        
        if size == 'No Module Installed' or size == 'Not Specified':
            results['empty_slots'] += 1
            results['slot_details'][slot_name] = {'status': 'empty'}
        else:
            results['populated_slots'] += 1
            # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
            if 'GB' in size:
                try:
                    memory_gb = int(size.split()[0])
                    results['total_memory_gb'] += memory_gb
                except (ValueError, IndexError) as e:
                    memory_gb = 0
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏ '{size}': {e}")
            else:
                memory_gb = 0
                
            results['slot_details'][slot_name] = {
                'status': 'populated',
                'size': size,
                'memory_gb': memory_gb,
                'speed': dimm.get('Configured Memory Speed', 'Unknown'),
                'manufacturer': dimm.get('Manufacturer', 'Unknown'),
                'part_number': dimm.get('Part Number', 'Unknown'),
                'serial': dimm.get('Serial Number', 'Unknown')
            }
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø–∞–º—è—Ç–∏ (–ø–æ –ª–æ–≥–∞–º –≤–∏–¥–Ω–æ DIMMG0, DIMMG2 –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
    if results['populated_slots'] == 2 and results['total_slots'] >= 4:
        results['memory_channels']['config'] = 'dual_channel_populated'
        results['memory_channels']['status'] = 'optimal'
    elif results['populated_slots'] > 0:
        results['memory_channels']['config'] = 'populated'
        results['memory_channels']['status'] = 'acceptable'
    else:
        results['memory_channels']['config'] = 'no_memory'
        results['memory_channels']['status'] = 'critical'
        results['warnings'].append('No memory modules detected')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    populated_slots_info = []
    for slot_name, slot_info in results['slot_details'].items():
        if slot_info['status'] == 'populated':
            populated_slots_info.append(slot_name)
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ø–ª–∞—Ç)
    if len(populated_slots_info) > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –ø–æ –∫–∞–Ω–∞–ª–∞–º (–æ–±—ã—á–Ω–æ DIMM_P0_*, DIMM_P1_* –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤)
        channels = {}
        for slot in populated_slots_info:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –∏–º–µ–Ω–∏ —Å–ª–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä P0, P1 –∏–∑ DIMM_P0_H1)
            if '_P' in slot:
                try:
                    channel = slot.split('_P')[1].split('_')[0]  # P0, P1 –∏ —Ç.–¥.
                    if channel not in channels:
                        channels[channel] = []
                    channels[channel].append(slot)
                except IndexError:
                    pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
        if len(channels) > 1:
            channel_counts = [len(slots) for slots in channels.values()]
            if len(set(channel_counts)) > 1:
                results['warnings'].append(f'Asymmetric memory population across channels: {dict(zip(channels.keys(), channel_counts))}')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ 1 –º–æ–¥—É–ª—å - —ç—Ç–æ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
        elif len(populated_slots_info) == 1:
            results['warnings'].append('Single memory module detected - consider dual-channel configuration')
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ç–Ω–æ—Å—Ç–∏
    # if results['populated_slots'] % 2 != 0:
    #     results['warnings'].append('Asymmetric memory configuration detected')
    
    return results

def validate_pci_slots(lshw_data, sensor_data: Dict) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PCIe —Å–ª–æ—Ç–æ–≤"""
    results = {
        'total_slots': 0,
        'populated_slots': 0,
        'slot_temperatures': {},
        'active_slots': [],
        'warnings': []
    }
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å–ª–æ—Ç–æ–≤
    slot_temp_sensors = {k: v for k, v in sensor_data.items() 
                        if k.startswith('SLOT') and 'TEMP' in k}
    
    for sensor_name, sensor_info in slot_temp_sensors.items():
        slot_num = sensor_name.replace('SLOT', '').replace('_TEMP', '')
        results['total_slots'] += 1
        
        temp_value = sensor_info.get('value', 'na')
        temp_status = sensor_info.get('status', 'na')
        
        if temp_value != 'na' and temp_status == 'ok':
            try:
                temp_c = float(temp_value)
                # –°–ª–æ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ ambient
                # –û–±—ã—á–Ω–æ ambient ~27-30¬∞C, –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã >40¬∞C
                if temp_c > 40.0:  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    results['populated_slots'] += 1
                    results['active_slots'].append(slot_num)
                    results['slot_temperatures'][slot_num] = {
                        'temperature_c': temp_c,
                        'status': 'active',
                        'sensor_status': temp_status
                    }
                else:
                    # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
                    results['slot_temperatures'][slot_num] = {
                        'temperature_c': temp_c,
                        'status': 'passive_or_empty',
                        'sensor_status': temp_status
                    }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≥—Ä–µ–≤
                if temp_c > 90:
                    results['warnings'].append(f'Slot {slot_num} overheating: {temp_c}¬∞C')
                    
            except ValueError:
                results['slot_temperatures'][slot_num] = {
                    'temperature_c': None,
                    'status': 'sensor_error',
                    'raw_value': temp_value
                }
        else:
            results['slot_temperatures'][slot_num] = {
                'temperature_c': None,
                'status': 'empty_or_inactive',
                'sensor_status': temp_status
            }
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ lshw (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    pci_devices = find_pci_devices(lshw_data)
    results['pci_devices_detected'] = len(pci_devices)
    
    # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - —É—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –Ω–µ –≤—Å–µ PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Å–µ—Ç—å, VGA, USB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã) –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ—é—Ç –¥–∞—Ç—á–∏–∫–æ–≤ –≤ —Å–ª–æ—Ç–∞—Ö
    expansion_cards = []
    for device in pci_devices:
        description = device.get('description', '').lower()
        # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if not any(builtin in description for builtin in 
                  ['ethernet', 'vga', 'usb', 'sata', 'audio', 'bridge', 'host bridge']):
            expansion_cards.append(device)
    
    results['expansion_cards_detected'] = len(expansion_cards)
    
    # –ù–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∞–∂–µ –±–µ–∑ –∫–∞—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–∞–≥—Ä–µ–≤–∞ –æ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
    
    return results

def enhanced_i2c_scan() -> Dict:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ i2c —à–∏–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∏–Ω"""
    results = {
        'available_buses': [],
        'unavailable_buses': [],
        'detected_devices': {},
        'scan_method': 'enhanced',
        'warnings': []
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∏–Ω—ã —á–µ—Ä–µ–∑ /dev
    dev_i2c_buses = glob.glob('/dev/i2c-*')
    potential_buses = [int(b.split('-')[1]) for b in dev_i2c_buses if b.split('-')[1].isdigit()]
    
    if not potential_buses:
        # Fallback - –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        potential_buses = list(range(11))  # 0-10 –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö
    
    for bus_num in potential_buses:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à–∏–Ω—ã
            result = subprocess.run(['i2cdetect', '-y', str(bus_num)], 
                                  capture_output=True, text=True, timeout=15)  # –£–≤–µ–ª–∏—á–µ–Ω timeout –¥–æ 15 —Å–µ–∫
            
            if result.returncode == 0 and 'Error:' not in result.stdout:
                results['available_buses'].append(bus_num)
                
                # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —à–∏–Ω–µ
                devices = []
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines:
                    parts = line.split()
                    if len(parts) > 1:
                        for addr in parts[1:]:
                            if addr != '--' and addr != 'UU':
                                devices.append(addr)
                
                if devices:
                    results['detected_devices'][bus_num] = devices
                    
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –∞–¥—Ä–µ—Å–∞–º
                    for addr in devices:
                        addr_int = int(addr, 16)
                        if 0x48 <= addr_int <= 0x4F:
                            results['warnings'].append(f'Bus {bus_num}: Possible CPLD at 0x{addr}')
                        elif 0x60 <= addr_int <= 0x6F:
                            results['warnings'].append(f'Bus {bus_num}: Possible VRM at 0x{addr}')
                        elif addr_int in [0x50, 0x51, 0x52, 0x53]:
                            results['warnings'].append(f'Bus {bus_num}: Possible EEPROM at 0x{addr}')
                            
            else:
                results['unavailable_buses'].append(bus_num)
                
        except subprocess.TimeoutExpired:
            results['unavailable_buses'].append(bus_num)
            results['warnings'].append(f'Bus {bus_num}: Timeout during scan')
        except Exception as e:
            results['unavailable_buses'].append(bus_num)
            results['warnings'].append(f'Bus {bus_num}: Error - {str(e)}')
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    total_buses = len(results['available_buses']) + len(results['unavailable_buses'])
    if not results['available_buses']:
        results['status'] = 'FAIL'
        results['message'] = 'No i2c buses available'
    elif len(results['unavailable_buses']) > total_buses * 0.5:
        results['status'] = 'WARNING'
        results['message'] = f'Many buses unavailable: {len(results["unavailable_buses"])}/{total_buses}'
    else:
        results['status'] = 'PASS'
        results['message'] = f'i2c scan completed: {len(results["available_buses"])} buses available'
    
    return results

def analyze_vrm_temperatures(sensor_data: Dict) -> Dict:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä VRM —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤"""
    results = {
        'vrm_sensors': {},
        'thermal_zones': {},
        'warnings': [],
        'status': 'PASS'
    }
    
    # –ü–æ–∏—Å–∫ VRM —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
    vrm_sensors = {k: v for k, v in sensor_data.items() 
                  if 'VR_' in k and 'TEMP' in k}
    
    vrm_categories = {
        'VCCIN': [],  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
        'VCCFA': [],  # Fabric –ø–∏—Ç–∞–Ω–∏–µ  
        'FAON': [],   # Always-on –ø–∏—Ç–∞–Ω–∏–µ
        'D_HV': []    # High voltage –ø–∏—Ç–∞–Ω–∏–µ
    }
    
    for sensor_name, sensor_info in vrm_sensors.items():
        temp_value = sensor_info.get('value', 'na')
        temp_status = sensor_info.get('status', 'na')
        
        if temp_value != 'na' and temp_status == 'ok':
            try:
                temp_c = float(temp_value)
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É VRM
                for category in vrm_categories:
                    if category in sensor_name:
                        vrm_categories[category].append({
                            'sensor': sensor_name,
                            'temperature': temp_c,
                            'status': temp_status
                        })
                        break
                
                results['vrm_sensors'][sensor_name] = {
                    'temperature_c': temp_c,
                    'status': temp_status,
                    'threshold_warning': 100.0,  # –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–Ω–æ –ø–æ—Ä–æ–≥–∏ 115-120¬∞C
                    'threshold_critical': 115.0
                }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if temp_c >= 115.0:
                    results['warnings'].append(f'{sensor_name}: Critical temperature {temp_c}¬∞C')
                    results['status'] = 'FAIL'
                elif temp_c >= 100.0:
                    results['warnings'].append(f'{sensor_name}: High temperature {temp_c}¬∞C')
                    if results['status'] == 'PASS':
                        results['status'] = 'WARNING'
                        
            except ValueError:
                results['warnings'].append(f'{sensor_name}: Invalid temperature value {temp_value}')
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∑–æ–Ω
    for category, sensors in vrm_categories.items():
        if sensors:
            temps = [s['temperature'] for s in sensors]
            results['thermal_zones'][category] = {
                'sensor_count': len(sensors),
                'avg_temperature': sum(temps) / len(temps),
                'max_temperature': max(temps),
                'min_temperature': min(temps),
                'sensors': sensors
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±—Ä–æ—Å–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            temp_range = max(temps) - min(temps)
            if temp_range > 10.0:
                results['warnings'].append(
                    f'{category} VRM: Large temperature spread {temp_range:.1f}¬∞C'
                )
    
    return results

def step_cpld_fpga_vrm_check(conf, qvl):
    """–®–∞–≥ 2.1. –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π CPLD/FPGA/VRM"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ CPLD/FPGA/VRM", "START")
    log = LOG_ROOT / 'cpld_fpga_vrm.log'
    results = {}
    
    try:
        # 1. –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ i2c
        i2c_results = enhanced_i2c_scan()
        results['i2c_scan'] = i2c_results
        
        # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ i2c —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        i2c_device_analysis = analyze_i2c_devices(i2c_results)
        results['i2c_device_analysis'] = i2c_device_analysis
        
        # 3. FPGA –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ lspci
        out = run(['lspci', '-v'], log)
        fpga_devices = [l for l in out.splitlines() if any(keyword in l.upper() 
                       for keyword in ['FPGA', 'ALTERA', 'XILINX', 'LATTICE', 'CPLD'])]
        results['fpga_devices'] = {
            'count': len(fpga_devices),
            'devices': fpga_devices
        }
        
        # 4. VRM –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ IPMI —Å–µ–Ω—Å–æ—Ä—ã
        vrm_analysis = analyze_vrm_via_ipmi(conf, log)
        results['vrm_analysis'] = vrm_analysis
        
        # 5. –ü–æ–∏—Å–∫ CPLD —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        cpld_analysis = detect_cpld_devices(log)
        results['cpld_analysis'] = cpld_analysis
        
        # 6. –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        system_controllers = analyze_system_controllers(out)
        results['system_controllers'] = system_controllers
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∏–∑ QVL –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        version_check_results = {}
        if i2c_results.get('detected_devices'):
            version_check_results['i2c_devices'] = 'detected_but_version_read_requires_specific_protocol'
        
        if vrm_analysis.get('vrm_sensors'):
            version_check_results['vrm_sensors'] = f"Found {len(vrm_analysis['vrm_sensors'])} VRM sensors"
            
        if cpld_analysis.get('potential_cpld_devices'):
            version_check_results['cpld_devices'] = f"Found {len(cpld_analysis['potential_cpld_devices'])} potential CPLD devices"
            
        results['version_check'] = version_check_results
        
        # 8. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status = determine_cpld_fpga_vrm_status(results)
        
        RESULT_JSON['results']['cpld_fpga_vrm'] = {'status': status, 'details': results}
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ CPLD/FPGA/VRM", status)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CPLD/FPGA/VRM: {e}")
        RESULT_JSON['results']['cpld_fpga_vrm'] = {
            'status': 'ERROR',
            'details': {'error': str(e)}
        }
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ CPLD/FPGA/VRM", "ERROR")

def analyze_i2c_devices(i2c_results: Dict) -> Dict:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö i2c —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    analysis = {
        'device_classification': {},
        'readable_devices': {},
        'potential_cpld': [],
        'potential_vrm': [],
        'potential_eeprom': [],
        'unknown_devices': []
    }
    
    for bus_num, devices in i2c_results.get('detected_devices', {}).items():
        for addr_str in devices:
            try:
                addr_int = int(addr_str, 16)
                device_info = {
                    'bus': bus_num,
                    'address': addr_str,
                    'address_int': addr_int
                }
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É
                if 0x08 <= addr_int <= 0x0F:
                    device_info['type'] = 'potential_cpld'
                    analysis['potential_cpld'].append(device_info)
                elif 0x40 <= addr_int <= 0x4F:
                    device_info['type'] = 'potential_vrm_or_sensor'
                    analysis['potential_vrm'].append(device_info)
                elif 0x50 <= addr_int <= 0x57:
                    device_info['type'] = 'potential_eeprom'
                    analysis['potential_eeprom'].append(device_info)
                elif 0x60 <= addr_int <= 0x6F:
                    device_info['type'] = 'potential_vrm'
                    analysis['potential_vrm'].append(device_info)
                else:
                    device_info['type'] = 'unknown'
                    analysis['unknown_devices'].append(device_info)
                
                # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                try:
                    result = subprocess.run(['i2cdump', '-y', str(bus_num), addr_str], 
                                          capture_output=True, text=True, timeout=5)
                    if result.returncode == 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Ç–æ–ª—å–∫–æ XX)
                        lines = result.stdout.split('\n')[1:4]  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                        has_real_data = any(line for line in lines 
                                          if line and not all(c in 'X -:' for c in line.replace(' ', '')))
                        
                        if has_real_data:
                            device_info['readable'] = True
                            device_info['sample_data'] = lines
                            analysis['readable_devices'][f"{bus_num}:{addr_str}"] = device_info
                        else:
                            device_info['readable'] = False
                    else:
                        device_info['readable'] = False
                except Exception as e:
                    device_info['readable'] = False
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ i2c —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {bus_num}:{addr_str}: {e}")
                    
                analysis['device_classification'][f"{bus_num}:{addr_str}"] = device_info
                
            except ValueError:
                continue
    
    return analysis

def analyze_vrm_via_ipmi(conf: Dict, log: Path) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ VRM —á–µ—Ä–µ–∑ IPMI —Å–µ–Ω—Å–æ—Ä—ã"""
    analysis = {
        'vrm_sensors': {},
        'temperature_status': 'PASS',
        'warnings': [],
        'sensor_count': 0
    }
    
    try:
        sensor_out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                         '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                         'sensor', 'list'], log, timeout=60)
        
        # –ü–æ–∏—Å–∫ VRM —Å–µ–Ω—Å–æ—Ä–æ–≤
        for line in sensor_out.splitlines():
            if 'VR_' in line and 'TEMP' in line:
                parts = line.split('|')
                if len(parts) >= 4:
                    name = parts[0].strip()
                    value = parts[1].strip()
                    unit = parts[2].strip()
                    status = parts[3].strip()
                    
                    if value != 'na' and status == 'ok':
                        try:
                            temp_c = float(value)
                            analysis['vrm_sensors'][name] = {
                                'temperature': temp_c,
                                'unit': unit,
                                'status': status,
                                'bus_line': line.strip()
                            }
                            analysis['sensor_count'] += 1
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
                            if temp_c >= 100.0:
                                analysis['warnings'].append(f'{name}: High temperature {temp_c}¬∞C')
                                if analysis['temperature_status'] == 'PASS':
                                    analysis['temperature_status'] = 'WARNING'
                            if temp_c >= 115.0:
                                analysis['warnings'].append(f'{name}: Critical temperature {temp_c}¬∞C')
                                analysis['temperature_status'] = 'FAIL'
                                
                        except ValueError:
                            analysis['warnings'].append(f'{name}: Invalid temperature value {value}')
    
    except Exception as e:
        analysis['error'] = str(e)
        analysis['temperature_status'] = 'ERROR'
    
    return analysis

def detect_cpld_devices(log: Path) -> Dict:
    """–ü–æ–∏—Å–∫ CPLD —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    analysis = {
        'potential_cpld_devices': [],
        'detection_methods': [],
        'status': 'NOT_FOUND'
    }
    
    try:
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ dmesg
        dmesg_result = subprocess.run(['dmesg'], capture_output=True, text=True, timeout=10)
        if dmesg_result.returncode == 0:
            cpld_lines = [line for line in dmesg_result.stdout.splitlines() 
                         if any(keyword in line.lower() for keyword in ['cpld', 'lattice', 'altera'])]
            if cpld_lines:
                analysis['potential_cpld_devices'].extend(cpld_lines[:3])  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                analysis['detection_methods'].append('dmesg_scan')
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ /sys/bus
        sys_devices = []
        for pattern in ['/sys/bus/*/devices/*cpld*', '/sys/bus/*/devices/*lattice*']:
            sys_devices.extend(glob.glob(pattern))
        
        if sys_devices:
            analysis['potential_cpld_devices'].extend([Path(d).name for d in sys_devices])
            analysis['detection_methods'].append('sysfs_scan')
        
        # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ /proc/device-tree (–µ—Å–ª–∏ –µ—Å—Ç—å)
        dt_cpld = glob.glob('/proc/device-tree/*cpld*')
        if dt_cpld:
            analysis['potential_cpld_devices'].extend([Path(d).name for d in dt_cpld])
            analysis['detection_methods'].append('device_tree_scan')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if analysis['potential_cpld_devices']:
            analysis['status'] = 'DETECTED'
        elif analysis['detection_methods']:
            analysis['status'] = 'SEARCHED_BUT_NOT_FOUND'
        else:
            analysis['status'] = 'NOT_SEARCHED'
            
    except Exception as e:
        analysis['error'] = str(e)
        analysis['status'] = 'ERROR'
    
    return analysis

def analyze_system_controllers(lspci_output: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å CPLD/FPGA"""
    analysis = {
        'aspeed_controllers': [],
        'intel_controllers': [],
        'other_controllers': [],
        'total_controllers': 0
    }
    
    for line in lspci_output.splitlines():
        line_upper = line.upper()
        
        # ASPEED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (—á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç CPLD)
        if 'ASPEED' in line_upper:
            analysis['aspeed_controllers'].append(line.strip())
            analysis['total_controllers'] += 1
        
        # Intel –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif 'INTEL' in line_upper and any(keyword in line_upper for keyword in 
                                          ['MANAGEMENT', 'CONTROLLER', 'BRIDGE']):
            analysis['intel_controllers'].append(line.strip())
            analysis['total_controllers'] += 1
        
        # –î—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        elif any(keyword in line_upper for keyword in 
                ['CONTROLLER', 'BRIDGE', 'MANAGEMENT']) and 'ETHERNET' not in line_upper:
            analysis['other_controllers'].append(line.strip())
            analysis['total_controllers'] += 1
    
    return analysis

def determine_cpld_fpga_vrm_status(results: Dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CPLD/FPGA/VRM"""
    status_factors = []
    
    # i2c —Å—Ç–∞—Ç—É—Å
    i2c_status = results.get('i2c_scan', {}).get('status', 'UNKNOWN')
    status_factors.append(('i2c', i2c_status))
    
    # VRM —Å—Ç–∞—Ç—É—Å
    vrm_status = results.get('vrm_analysis', {}).get('temperature_status', 'UNKNOWN')
    status_factors.append(('vrm', vrm_status))
    
    # CPLD –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
    cpld_status = results.get('cpld_analysis', {}).get('status', 'NOT_FOUND')
    if cpld_status == 'DETECTED':
        status_factors.append(('cpld', 'PASS'))
    elif cpld_status == 'SEARCHED_BUT_NOT_FOUND':
        status_factors.append(('cpld', 'WARNING'))
    else:
        status_factors.append(('cpld', 'FAIL'))
    
    # FPGA —Å—Ç–∞—Ç—É—Å
    fpga_count = results.get('fpga_devices', {}).get('count', 0)
    if fpga_count > 0:
        status_factors.append(('fpga', 'PASS'))
    else:
        status_factors.append(('fpga', 'WARNING'))  # FPGA –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    controller_count = results.get('system_controllers', {}).get('total_controllers', 0)
    if controller_count > 0:
        status_factors.append(('controllers', 'PASS'))
    else:
        status_factors.append(('controllers', 'WARNING'))
    
    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    fail_count = sum(1 for _, status in status_factors if status == 'FAIL')
    error_count = sum(1 for _, status in status_factors if status == 'ERROR')
    warning_count = sum(1 for _, status in status_factors if status == 'WARNING')
    pass_count = sum(1 for _, status in status_factors if status == 'PASS')
    
    if error_count > 0:
        return 'ERROR'
    elif fail_count > 1:  # –ë–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—è
        return 'FAIL'
    elif fail_count == 1 and pass_count == 0:  # –û–¥–∏–Ω —Å–±–æ–π –∏ –Ω–µ—Ç —É—Å–ø–µ—Ö–æ–≤
        return 'FAIL'
    elif pass_count >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return 'PASS'
    elif warning_count > 0 or pass_count > 0:
        return 'WARNING'
    else:
        return 'FAIL'

def step_detailed_inventory(conf, reference):
    """4.2.6 –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ lshw"""
    log = LOG_ROOT / 'detailed_inventory.log'
    
    print_step("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–ø–∞—Ä–∞—Ç—É—Ä–µ
        lshw_result = run(['lshw', '-json'], log)
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ stdout, –∏–∑–±–µ–≥–∞—è –ø—Ä–æ–±–ª–µ–º —Å –ª–æ–≥–æ–º
        try:
            cur = json.loads(lshw_result)
        except json.JSONDecodeError as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç lshw: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ lshw –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        lshw_json_file = LOG_ROOT / 'lshw.json'
        with lshw_json_file.open('w', encoding='utf-8') as f:
            json.dump(cur, f, ensure_ascii=False, indent=2)
        
        results = {}
        
        # 4.2.6.1 –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        def find_processors(data):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö lshw"""
            processors = []
            
            def search_node(node):
                if isinstance(node, dict):
                    # –ò—â–µ–º —É–∑–ª—ã —Å –∫–ª–∞—Å—Å–æ–º 'processor'
                    if node.get('class') == 'processor' and 'product' in node:
                        processors.append({
                            'socket': node.get('id', 'unknown'),
                            'model': node.get('product', 'Unknown'),
                            'speed_mhz': node.get('configuration', {}).get('cores', 'unknown'),
                            'cores': node.get('configuration', {}).get('cores', 'unknown'),
                            'threads': node.get('configuration', {}).get('threads', 'unknown')
                        })
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    if 'children' in node:
                        for child in node['children']:
                            search_node(child)
                
                elif isinstance(node, list):
                    for item in node:
                        search_node(item)
            
            search_node(data)
            return processors
        
        cpus_cur = find_processors(cur)
        results['cpus'] = {'found': len(cpus_cur), 'expected': len(reference.get('processors', []))}
        
        # 4.2.6.2 –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DIMM —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        dimm_out = run(['dmidecode', '-t', '17'], log)
        dimms = []
        current_dimm = {}
        for line in dimm_out.splitlines():
            line = line.strip()
            if line.startswith('Memory Device'):
                if current_dimm:
                    dimms.append(current_dimm)
                current_dimm = {}
            elif ':' in line:
                key, value = line.split(':', 1)
                current_dimm[key.strip()] = value.strip()
        if current_dimm:
            dimms.append(current_dimm)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        memory_config = check_memory_configuration(dimms)
        results['memory_configuration'] = memory_config
        
        # 4.2.6.3.4 Check NVMe Disks
        nvme_out = run(['lsblk', '-J', '-o', 'NAME,MODEL,SIZE,TYPE'], log, accept_rc=[0, 1])
        try:
            nvme_data = json.loads(nvme_out)
            nvme_disks = [d for d in nvme_data.get('blockdevices', []) if d.get('name', '').startswith('nvme')]
            results['nvme_disks'] = {'found': len(nvme_disks), 'details': nvme_disks}
        except json.JSONDecodeError as e:
            results['nvme_disks'] = {'found': 0, 'error': f'Failed to parse lsblk JSON output: {e}'}
        except Exception as e:
            results['nvme_disks'] = {'found': 0, 'error': f'Failed to process NVMe data: {e}'}
        
        # 4.2.6.3.5 Check SATA Disks  
        sata_disks = []
        try:
            for device in glob.glob('/dev/sd*'):
                if not device[-1].isdigit():  # –∏—Å–∫–ª—é—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
                    try:
                        model_out = run(['hdparm', '-I', device], log, accept_rc=[0, 1], timeout=30)
                        model_line = next((l for l in model_out.splitlines() if 'Model Number:' in l), '')
                        if model_line:
                            model = model_line.split(':', 1)[1].strip()
                            sata_disks.append({'device': device, 'model': model})
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SATA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device}: {e}")
                        continue
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ SATA —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        results['sata_disks'] = {'found': len(sata_disks), 'details': sata_disks}
        
        # 4.2.6.3.7 –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        try:
            pci_devices = find_pci_devices(cur)
            results['pci_devices'] = {
                'count': len(pci_devices),
                'devices': pci_devices[:15],  # –ü–µ—Ä–≤—ã–µ 15 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                'by_class': {}
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for device in pci_devices:
                device_class = device.get('class', 'unknown')
                if device_class not in results['pci_devices']['by_class']:
                    results['pci_devices']['by_class'][device_class] = 0
                results['pci_devices']['by_class'][device_class] += 1
                
        except Exception as e:
            results['pci_devices'] = {'error': str(e), 'count': 0}
        
        # 4.2.6.3.8 AllxUSB3.0 Devices
        usb_out = run(['lsusb'], log, accept_rc=[0, 1])
        usb3_devices = [l for l in usb_out.splitlines() if '3.' in l or 'USB 3' in l]
        results['usb3_devices'] = {'found': len(usb3_devices), 'details': usb3_devices}
        
        # 4.2.6.3.10 –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        lan_status = check_network_interfaces()
        results['lan_status'] = lan_status
        
        # 4.2.6.3.11 –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ CR2032
        battery_info = enhanced_battery_check(conf)
        results['battery_cr2032_enhanced'] = battery_info
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ VRM
        try:
            sensor_out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                             '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                             'sensor', 'list'], log, timeout=60)
            
            sensors = {}
            for line in sensor_out.splitlines():
                parts = line.split('|')
                if len(parts) >= 4:
                    name = parts[0].strip()
                    value = parts[1].strip()
                    unit = parts[2].strip()
                    status = parts[3].strip()
                    
                    sensors[name] = {
                        'value': value,
                        'unit': unit,
                        'status': status
                    }
            
            # –ê–Ω–∞–ª–∏–∑ PCIe —Å–ª–æ—Ç–æ–≤
            pci_analysis = validate_pci_slots(cur, sensors)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π cur –≤–º–µ—Å—Ç–æ content
            results['pci_slot_analysis'] = pci_analysis
            
            # –ê–Ω–∞–ª–∏–∑ VRM —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            vrm_analysis = analyze_vrm_temperatures(sensors)
            results['vrm_temperature_analysis'] = vrm_analysis
            
        except Exception as e:
            results['sensor_analysis_error'] = str(e)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        network_analysis = analyze_network_connectivity()
        results['network_connectivity_analysis'] = network_analysis
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if 'pci_devices' in results and results['pci_devices'].get('count', 0) > 0:
            try:
                pci_classification = classify_pci_devices_enhanced(pci_devices)
                results['pci_classification'] = pci_classification
            except Exception as e:
                results['pci_classification_error'] = str(e)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status = 'PASS'
        warning_conditions = []
        fail_conditions = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        if results['cpus']['found'] != results['cpus']['expected']:
            fail_conditions.append(f"CPU count mismatch: {results['cpus']['found']} vs {results['cpus']['expected']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memory_warnings = memory_config.get('warnings', [])
        if memory_warnings:
            warning_conditions.extend(memory_warnings)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ VRM
        if 'vrm_temperature_analysis' in results:
            vrm_status = results['vrm_temperature_analysis']['status']
            if vrm_status == 'FAIL':
                fail_conditions.append("VRM critical temperature detected")
            elif vrm_status == 'WARNING':
                warning_conditions.append("VRM high temperature detected")
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
        if battery_info['status'] == 'FAIL':
            fail_conditions.append("Battery voltage critical")
        elif battery_info['status'] == 'WARNING':
            warning_conditions.append("Battery voltage low")
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ - –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if network_analysis.get('overall_status') == 'FAIL':
            fail_conditions.append("Network configuration issues")
        elif network_analysis.get('overall_status') == 'ERROR':
            fail_conditions.append("Network analysis error")
        # –£–±–∏—Ä–∞–µ–º WARNING –¥–ª—è —Å–µ—Ç–∏ –±–µ–∑ –∫–∞–±–µ–ª–µ–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        # –ù–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è PCIe —Å–ª–æ—Ç–æ–≤ - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –∫–∞—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if fail_conditions:
            status = 'FAIL'
            results['fail_reasons'] = fail_conditions
        elif warning_conditions:
            status = 'WARNING'
            results['warning_reasons'] = warning_conditions
        
        RESULT_JSON['results']['detailed_inventory'] = {'status': status, 'details': results}
        RESULT_JSON['logs']['detailed_inventory'] = str(lshw_json_file)
        print_step("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", status)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ lshw: {e}")
        RESULT_JSON['results']['detailed_inventory'] = {
            'status': 'ERROR',
            'details': {'error': str(e)}
        }
        print_step("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", "ERROR")

def step_sensor_readings(conf, reference):
    """–®–∞–≥ 4.2.8. –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ TRD 4.2.8.2.1-4.2.8.2.4"""
    print_step("–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤", "START")
    log = LOG_ROOT / 'sensor_readings.log'
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    if not SENSOR_VALIDATOR_AVAILABLE:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å SensorValidator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
        return step_sensor_readings_legacy(conf, reference)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–µ–Ω—Å–æ—Ä–æ–≤
        limits_file = REF_ROOT / 'sensor_limits.json'
        
        if not limits_file.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª –ø—Ä–µ–¥–µ–ª–æ–≤ —Å–µ–Ω—Å–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {limits_file}")
            RESULT_JSON['results']['sensor_readings'] = {
                'status': 'SKIP',
                'details': {'message': f'Sensor limits file not found: {limits_file}'}
            }
            print_step("–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤", "SKIP")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        sensor_validator = SensorValidator(str(limits_file))
        validation_results = sensor_validator.perform_full_validation(conf)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        validation_report_path = LOG_ROOT / 'sensor_validation_report.json'
        sensor_validator.save_validation_report(validation_results, str(validation_report_path))
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ª–æ–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
             '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
             'sensor', 'list'], log)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        overall_status = validation_results['overall_status']
        summary = validation_results['summary']
        category_results = validation_results['category_results']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        results = {
            'validation_method': 'full_TRD_4.2.8_compliance',
            'total_sensors_checked': summary['total_checked'],
            'total_sensors_passed': summary['total_passed'],
            'total_violations': summary['total_violations'],
            'categories_checked': summary['categories_checked'],
            'validation_file': str(limits_file),
            'detailed_report': str(validation_report_path),
            
            'category_summary': {
                'voltages': {
                    'checked': category_results['voltages']['actually_checked'],
                    'passed': category_results['voltages']['passed_sensors'],
                    'failed': category_results['voltages']['failed_sensors'],
                    'status': category_results['voltages']['status']
                },
                'temperatures': {
                    'checked': category_results['temperatures']['actually_checked'],
                    'passed': category_results['temperatures']['passed_sensors'],
                    'failed': category_results['temperatures']['failed_sensors'],
                    'status': category_results['temperatures']['status']
                },
                'fans': {
                    'checked': category_results['fans']['actually_checked'],
                    'passed': category_results['fans']['passed_sensors'],
                    'failed': category_results['fans']['failed_sensors'],
                    'status': category_results['fans']['status']
                },
                'power': {
                    'checked': category_results['power']['actually_checked'],
                    'passed': category_results['power']['passed_sensors'],
                    'failed': category_results['power']['failed_sensors'],
                    'status': category_results['power']['status']
                },
                'discrete': {
                    'checked': category_results['discrete']['actually_checked'],
                    'passed': category_results['discrete']['passed_sensors'],
                    'failed': category_results['discrete']['failed_sensors'],
                    'status': category_results['discrete']['status']
                }
            }
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        critical_violations = []
        warning_violations = []
        
        for category_name, category_result in category_results.items():
            for violation in category_result.get('violations', []):
                if violation.get('type') in ['UNDERVOLTAGE', 'OVERVOLTAGE', 'OVERTEMPERATURE', 
                                           'FAN_STOPPED', 'OVERPOWER', 'CRITICAL_STATUS']:
                    critical_violations.append(f"{category_name}: {violation.get('message', 'Unknown error')}")
                else:
                    warning_violations.append(f"{category_name}: {violation.get('message', 'Unknown error')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if critical_violations:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è ({len(critical_violations)}):")
            for violation in critical_violations[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                print(f"  ‚Ä¢ {violation}")
            if len(critical_violations) > 5:
                print(f"  ‚Ä¢ ... –∏ –µ—â—ë {len(critical_violations) - 5} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        
        if warning_violations:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warning_violations)}):")
            for violation in warning_violations[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                print(f"  ‚Ä¢ {violation}")
            if len(warning_violations) > 3:
                print(f"  ‚Ä¢ ... –∏ –µ—â—ë {len(warning_violations) - 3} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        RESULT_JSON['results']['sensor_readings'] = {
            'status': overall_status,
            'details': results
        }
        RESULT_JSON['logs']['sensor_readings'] = str(log)
        RESULT_JSON['logs']['sensor_validation'] = str(validation_report_path)
        
        print_step("–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤", overall_status)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤: {e}")
        RESULT_JSON['results']['sensor_readings'] = {
            'status': 'ERROR',
            'details': {'error': str(e)}
        }
        print_step("–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤", "ERROR")

def step_sensor_readings_legacy(conf, reference):
    """–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print_step("–ß—Ç–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)", "START")
    log = LOG_ROOT / 'sensor_readings.log'
    results = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–Ω—Å–æ—Ä—ã —á–µ—Ä–µ–∑ IPMI
    sensor_out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                     '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                     'sensor', 'list'], log)
    
    sensors = {}
    for line in sensor_out.splitlines():
        parts = line.split('|')
        if len(parts) >= 4:
            name = parts[0].strip()
            value = parts[1].strip()
            unit = parts[2].strip()
            status = parts[3].strip()
            
            sensors[name] = {
                'value': value,
                'unit': unit,
                'status': status
            }
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    voltage_sensors = {k: v for k, v in sensors.items() if 'volt' in k.lower() or v['unit'] == 'Volts'}
    current_sensors = {k: v for k, v in sensors.items() if 'current' in k.lower() or v['unit'] == 'Amps'}
    power_sensors = {k: v for k, v in sensors.items() if 'power' in k.lower() or v['unit'] == 'Watts'}
    temp_sensors = {k: v for k, v in sensors.items() if 'temp' in k.lower() or v['unit'] == 'degrees C'}
    fan_sensors = {k: v for k, v in sensors.items() if 'fan' in k.lower() or v['unit'] == 'RPM'}
    
    results['voltage_sensors'] = voltage_sensors
    results['current_sensors'] = current_sensors  
    results['power_sensors'] = power_sensors
    results['temperature_sensors'] = temp_sensors
    results['fan_sensors'] = fan_sensors
    
    # –ê–Ω–∞–ª–∏–∑ VRM —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    vrm_analysis = analyze_vrm_temperatures(sensors)
    results['vrm_analysis'] = vrm_analysis
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    fan_warnings = []
    for fan_name, fan_data in fan_sensors.items():
        if fan_data['value'] != 'na' and fan_data['status'] == 'ok':
            try:
                rpm = float(fan_data['value'])
                if rpm < 1000:
                    fan_warnings.append(f'{fan_name}: Low RPM {rpm}')
                elif rpm < 1500:
                    fan_warnings.append(f'{fan_name}: Warning RPM {rpm}')
            except ValueError:
                fan_warnings.append(f'{fan_name}: Invalid RPM value {fan_data["value"]}')
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    voltage_warnings = []
    voltage_specs = {
        '12V': {'min': 10.5, 'max': 13.5, 'nominal': 12.0},
        '5V': {'min': 4.5, 'max': 5.5, 'nominal': 5.0},
        '3V3': {'min': 3.0, 'max': 3.6, 'nominal': 3.3},
        '1V8': {'min': 1.6, 'max': 2.0, 'nominal': 1.8},
        '1V05': {'min': 0.9, 'max': 1.2, 'nominal': 1.05},
        '1V': {'min': 0.9, 'max': 1.15, 'nominal': 1.0}
    }
    
    for voltage_name, voltage_data in voltage_sensors.items():
        if voltage_data['value'] != 'na' and voltage_data['status'] == 'ok':
            try:
                voltage = float(voltage_data['value'])
                for spec_name, spec in voltage_specs.items():
                    if (spec_name in voltage_name or 
                        spec_name.replace('V', 'V_') in voltage_name or
                        spec_name.replace('.', '') in voltage_name):
                        if voltage < spec['min'] or voltage > spec['max']:
                            voltage_warnings.append(
                                f'{voltage_name}: Out of range {voltage}V (expected {spec["min"]}-{spec["max"]}V)'
                            )
                        break
            except ValueError:
                voltage_warnings.append(f'{voltage_name}: Invalid voltage value {voltage_data["value"]}')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    normal_discrete_statuses = ['0x0080', '0x8080', '0x0180']
    critical_sensors = {}
    
    for name, sensor_data in sensors.items():
        status = sensor_data['status']
        unit = sensor_data['unit']
        value = sensor_data['value']
        
        if status in ['ok', 'ns', 'na']:
            continue
            
        if unit == 'discrete' and status in normal_discrete_statuses:
            continue
            
        if value == 'na':
            continue
            
        critical_sensors[name] = sensor_data
    
    active_sensors = {k: v for k, v in sensors.items() 
                     if v['status'] == 'ok' and v['value'] != 'na'}
    
    results['total_sensors'] = len(sensors)
    results['active_sensors'] = len(active_sensors)
    results['critical_sensors'] = critical_sensors
    results['fan_warnings'] = fan_warnings
    results['voltage_warnings'] = voltage_warnings
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    status = 'PASS'
    fail_reasons = []
    warning_reasons = []
    
    if critical_sensors:
        status = 'FAIL'
        fail_reasons.append(f'Critical sensors detected: {list(critical_sensors.keys())}')
    
    if vrm_analysis['status'] == 'FAIL':
        status = 'FAIL'
        fail_reasons.append('VRM critical temperature detected')
    elif vrm_analysis['status'] == 'WARNING':
        warning_reasons.append('VRM high temperature detected')
    
    if fan_warnings:
        warning_reasons.append('Fan warnings detected')
    
    if voltage_warnings:
        critical_voltage_warnings = []
        for warning in voltage_warnings:
            if 'Out of range' in warning:
                try:
                    voltage_str = warning.split('Out of range ')[1].split('V')[0]
                    voltage_val = float(voltage_str)
                    if voltage_val < 1.0 or voltage_val > 15.0:
                        critical_voltage_warnings.append(warning)
                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è '{voltage_str}': {e}")
                    continue
        
        if critical_voltage_warnings:
            if status != 'FAIL':
                status = 'WARNING'
            fail_reasons.extend(critical_voltage_warnings)
        else:
            warning_reasons.append('Minor voltage deviations detected')
    
    if fail_reasons:
        if status != 'FAIL':
            status = 'WARNING'
        results['fail_reasons'] = fail_reasons
    elif warning_reasons:
        if status == 'PASS':
            status = 'WARNING'
        results['warning_reasons'] = warning_reasons
    
    RESULT_JSON['results']['sensor_readings'] = {'status': status, 'details': results}
    print_step("–ß—Ç–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)", status)

def step_flash_macs_disabled(conf):
    """–¢–µ—Å—Ç MAC –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
    print_step("–¢–µ—Å—Ç MAC –∞–¥—Ä–µ—Å–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω)", "SKIP")
    RESULT_JSON['results']['macs'] = {
        'status': 'SKIP', 
        'details': {'message': 'MAC address testing disabled by request'}
    }
    print_step("–¢–µ—Å—Ç MAC –∞–¥—Ä–µ—Å–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω)", "SKIP")

def step_sensors(label: str, conf):
    """–°–±–æ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å–µ–Ω—Å–æ—Ä–æ–≤"""
    log = LOG_ROOT / f'sensors_{label}.log'
    run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
         '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
         'sensor', 'list'], log)
    RESULT_JSON['logs'][f'sensors_{label}'] = str(log)

def step_stress(conf):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    print_step("–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "START")
    log = LOG_ROOT / 'stress.log'
    cpu_threads = os.cpu_count() or 4
    
    # –ü–µ—Ä–µ–¥ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º —Å–æ–±–∏—Ä–∞–µ–º baseline —Å–µ–Ω—Å–æ—Ä–æ–≤
    step_sensors('baseline', conf)
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π CPU –∏ –ø–∞–º—è—Ç—å —Å—Ç—Ä–µ—Å—Å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    try:
        print_step("CPU —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (1 –º–∏–Ω—É—Ç–∞)", "START")
        # CPU —Å—Ç—Ä–µ—Å—Å: –≤—Å–µ –ø–æ—Ç–æ–∫–∏, 1 –º–∏–Ω—É—Ç–∞
        cpu_result = run(['stress-ng','--cpu',str(cpu_threads),
                         '--timeout','60','--metrics-brief'], log, timeout=120)
        
        # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ CPU —Å—Ç—Ä–µ—Å—Å–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å–µ–Ω—Å–æ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        step_sensors('post_cpu_stress', conf)
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã stress-ng
        stress_metrics = {}
        for line in cpu_result.splitlines():
            if 'cpu' in line and 'bogo ops/s' in line:
                parts = line.split()
                if len(parts) >= 6:
                    stress_metrics['cpu_bogo_ops_total'] = parts[3]
                    stress_metrics['cpu_real_time'] = parts[4]
                    stress_metrics['cpu_bogo_ops_per_sec'] = parts[7] if len(parts) > 7 else 'unknown'
        
        print_step("–ü–∞–º—è—Ç—å —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (1 –º–∏–Ω—É—Ç–∞)", "START")  
        # Memory stress: 2 –ø—Ä–æ—Ü–µ—Å—Å–∞, 70% –ø–∞–º—è—Ç–∏, 1 –º–∏–Ω—É—Ç–∞
        mem_result = run(['stress-ng','--vm','2','--vm-bytes','70%',
                         '--timeout','60','--metrics-brief'], log, timeout=120)
        
        RESULT_JSON['results']['stress_cpu'] = {'status': 'PASS', 'metrics': stress_metrics}
        RESULT_JSON['results']['stress_memory'] = {'status': 'PASS'}
        
    except Exception as e:
        RESULT_JSON['results']['stress_cpu'] = {'status': 'FAIL', 'error': str(e)}
        RESULT_JSON['results']['stress_memory'] = {'status': 'FAIL', 'error': str(e)}
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π Disk stress —Å FIO
    try:
        print_step("–î–∏—Å–∫ I/O —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (1 –º–∏–Ω—É—Ç–∞)", "START")
        fio_result = run(['fio','--name','randrw','--ioengine=libaio',
                         '--iodepth=16','--rw=randrw','--bs=4k',
                         '--direct=1','--size=1G','--numjobs=4',
                         '--runtime=60','--group_reporting',
                         '--filename=/tmp/stress_file'], log, timeout=120)
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã FIO
        fio_metrics = {}
        lines = fio_result.splitlines()
        for i, line in enumerate(lines):
            if 'read:' in line and 'IOPS=' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º IOPS –∏ BW –¥–ª—è —á—Ç–µ–Ω–∏—è
                parts = line.split()
                for part in parts:
                    if 'IOPS=' in part:
                        fio_metrics['read_iops'] = part.split('=')[1]
                    elif 'BW=' in part:
                        fio_metrics['read_bw'] = part.split('=')[1]
            elif 'write:' in line and 'IOPS=' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º IOPS –∏ BW –¥–ª—è –∑–∞–ø–∏—Å–∏
                parts = line.split()
                for part in parts:
                    if 'IOPS=' in part:
                        fio_metrics['write_iops'] = part.split('=')[1]
                    elif 'BW=' in part:
                        fio_metrics['write_bw'] = part.split('=')[1]
        
        RESULT_JSON['results']['stress_disk'] = {'status': 'PASS', 'metrics': fio_metrics}
        
    except Exception as e:
        RESULT_JSON['results']['stress_disk'] = {'status': 'FAIL', 'error': str(e)}
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ –∏ –ø–æ—Å–ª–µ CPU —Å—Ç—Ä–µ—Å—Å–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π timing)
    try:
        baseline_log = LOG_ROOT / 'sensors_baseline.log'
        post_cpu_stress_log = LOG_ROOT / 'sensors_post_cpu_stress.log'
        
        if baseline_log.exists() and post_cpu_stress_log.exists():
            temp_comparison = compare_sensor_temperatures(baseline_log, post_cpu_stress_log)
            RESULT_JSON['results']['thermal_impact'] = temp_comparison
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            missing_files = []
            if not baseline_log.exists():
                missing_files.append(str(baseline_log))
            if not post_cpu_stress_log.exists():
                missing_files.append(str(post_cpu_stress_log))
            RESULT_JSON['warnings'].append(f'Temperature comparison skipped - missing files: {", ".join(missing_files)}')
    except Exception as e:
        RESULT_JSON['warnings'].append(f'Temperature comparison failed: {e}')
    
    overall_status = 'PASS'
    if any(r.get('status') == 'FAIL' for r in [
        RESULT_JSON['results'].get('stress_cpu', {}),
        RESULT_JSON['results'].get('stress_memory', {}), 
        RESULT_JSON['results'].get('stress_disk', {})
    ]):
        overall_status = 'FAIL'
    
    RESULT_JSON['results']['stress'] = {'status': overall_status}
    print_step("–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", overall_status)

def compare_sensor_temperatures(baseline_file: Path, post_stress_file: Path) -> Dict:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–æ –∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
    def parse_sensors_from_log(log_file: Path) -> Dict:
        sensors = {}
        if not log_file.exists():
            return sensors
            
        with log_file.open('r') as f:
            for line in f:
                if '|' in line and 'degrees C' in line:
                    parts = line.split('|')
                    if len(parts) >= 4:
                        name = parts[0].strip()
                        value = parts[1].strip()
                        status = parts[3].strip()
                        
                        if value != 'na' and status == 'ok':
                            try:
                                sensors[name] = float(value)
                            except ValueError:
                                pass
        return sensors
    
    baseline_temps = parse_sensors_from_log(baseline_file)
    post_stress_temps = parse_sensors_from_log(post_stress_file)
    
    comparison = {
        'baseline_sensors': len(baseline_temps),
        'post_stress_sensors': len(post_stress_temps),
        'temperature_deltas': {},
        'warnings': [],
        'max_temp_increase': 0.0
    }
    
    for sensor_name in baseline_temps:
        if sensor_name in post_stress_temps:
            delta = post_stress_temps[sensor_name] - baseline_temps[sensor_name]
            comparison['temperature_deltas'][sensor_name] = {
                'baseline': baseline_temps[sensor_name],
                'post_stress': post_stress_temps[sensor_name],
                'delta': delta
            }
            
            if delta > comparison['max_temp_increase']:
                comparison['max_temp_increase'] = delta
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            if delta > 20.0:  # –†–æ—Å—Ç –±–æ–ª—å—à–µ 20¬∞C
                comparison['warnings'].append(f'{sensor_name}: Large temp increase +{delta:.1f}¬∞C')
            elif delta > 15.0:  # –†–æ—Å—Ç –±–æ–ª—å—à–µ 15¬∞C
                comparison['warnings'].append(f'{sensor_name}: Significant temp increase +{delta:.1f}¬∞C')
    
    # –°—Ç–∞—Ç—É—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if comparison['max_temp_increase'] > 25.0:
        comparison['status'] = 'FAIL'
    elif comparison['max_temp_increase'] > 15.0 or comparison['warnings']:
        comparison['status'] = 'WARNING'
    else:
        comparison['status'] = 'PASS'
    
    return comparison

def step_fp1_test(conf):
    """–®–∞–≥ 4.2.6.2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –≤—ã–≤–æ–¥–æ–≤ FP_1 (–∑–∞–≥–ª—É—à–∫–∞)"""
    log = LOG_ROOT / 'fp1_test.log'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPIO —á–µ—Ä–µ–∑ sysfs –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    gpio_paths = glob.glob('/sys/class/gpio/gpio*')
    results = {
        'gpio_count': len(gpio_paths),
        'status': 'WARNING',
        'message': 'FP_1 testing requires specialized hardware module (ESP32)'
    }
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ESP32 –º–æ–¥—É–ª–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
    # - LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ 
    # - –ö–Ω–æ–ø–æ–∫ PWR_BTN, ID_BTN
    # - –ò—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    with log.open('w') as f:
        f.write('FP_1 testing placeholder - requires ESP32 module integration\n')
        f.write(f'Found {len(gpio_paths)} GPIO interfaces\n')
    
    RESULT_JSON['results']['fp1_test'] = {'status': 'WARNING', 'details': results}
    RESULT_JSON['logs']['fp1_test'] = str(log)

def step_vga_test(conf):
    """–®–∞–≥ 4.2.6.3.9. –ü—Ä–æ–≤–µ—Ä–∫–∞ VGA –≤—ã—Ö–æ–¥–∞"""
    log = LOG_ROOT / 'vga_test.log'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
        vga_out = run(['lspci', '-v'], log)
        vga_devices = [l for l in vga_out.splitlines() if 'VGA' in l or 'Display' in l]
        
        results = {
            'vga_devices_found': len(vga_devices),
            'devices': vga_devices
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å framebuffer
        fb_devices = glob.glob('/dev/fb*')
        results['framebuffer_devices'] = len(fb_devices)
        
        status = 'PASS' if vga_devices and fb_devices else 'FAIL'
        results['status'] = status
        
    except Exception as e:
        results = {'status': 'FAIL', 'error': str(e)}
        status = 'FAIL'
    
    RESULT_JSON['results']['vga_test'] = {'status': status, 'details': results}

def step_i3c_scan(conf):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∏–Ω—ã i3c"""
    print_step("I3C —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "START") 
    log = LOG_ROOT / 'i3c_scan.log'
    
    results = {
        'status': 'SKIP',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SKIP –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        'message': 'i3c bus not found in system (optional feature)',
        'methods_tried': []
    }
    
    try:
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ i3c —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ device tree –∏–ª–∏ sysfs
        i3c_paths = glob.glob('/sys/bus/i3c/devices/*')
        if i3c_paths:
            results['i3c_devices'] = len(i3c_paths)
            results['devices'] = [Path(p).name for p in i3c_paths]
            results['status'] = 'PASS'
            results['message'] = f'Found {len(i3c_paths)} i3c devices via sysfs'
            results['methods_tried'].append('sysfs_scan_success')
        else:
            results['methods_tried'].append('sysfs_scan_empty')
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ dmesg
            try:
                dmesg_out = run(['dmesg'], log, accept_rc=[0, 1])
                i3c_lines = [l for l in dmesg_out.splitlines() if 'i3c' in l.lower()]
                if i3c_lines:
                    results['dmesg_i3c_lines'] = len(i3c_lines)
                    results['i3c_dmesg_entries'] = i3c_lines[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    results['status'] = 'INFO'  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    results['message'] = f'Found {len(i3c_lines)} i3c references in dmesg (bus may be initializing)'
                    results['methods_tried'].append('dmesg_scan_found')
                else:
                    results['methods_tried'].append('dmesg_scan_empty')
            except Exception as e:
                results['methods_tried'].append(f'dmesg_scan_error: {str(e)}')
                
            # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —è–¥—Ä–∞
            try:
                lsmod_out = run(['lsmod'], log, accept_rc=[0, 1])
                i3c_modules = [l for l in lsmod_out.splitlines() if 'i3c' in l.lower()]
                if i3c_modules:
                    results['i3c_kernel_modules'] = i3c_modules
                    results['methods_tried'].append('kernel_modules_found')
                else:
                    results['methods_tried'].append('kernel_modules_empty')
            except Exception as e:
                results['methods_tried'].append(f'kernel_modules_error: {str(e)}')
                
            # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ /proc/bus/
            try:
                proc_bus_paths = glob.glob('/proc/bus/*i3c*')
                if proc_bus_paths:
                    results['proc_bus_i3c'] = [Path(p).name for p in proc_bus_paths]
                    results['methods_tried'].append('proc_bus_found')
                else:
                    results['methods_tried'].append('proc_bus_empty')
            except Exception as e:
                results['methods_tried'].append(f'proc_bus_error: {str(e)}')
    
    except Exception as e:
        results['error'] = str(e)
        results['status'] = 'ERROR'
        results['message'] = f'i3c scan error: {str(e)}'
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with log.open('w') as f:
        f.write('i3c bus scanning - enhanced implementation\n')
        f.write(f'Methods tried: {results["methods_tried"]}\n')
        f.write(json.dumps(results, indent=2))
    
    RESULT_JSON['results']['i3c_scan'] = results
    RESULT_JSON['logs']['i3c_scan'] = str(log)
    print_step("I3C —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", results['status'])

def step_sel_analyse(conf):
    """–ê–Ω–∞–ª–∏–∑ SEL –ª–æ–≥–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timing"""
    print_step("–ê–Ω–∞–ª–∏–∑ SEL", "START")
    
    before = LOG_ROOT / 'sel_before.log'
    after  = LOG_ROOT / 'sel_after.log'
    diff   = LOG_ROOT / 'sel_diff.log'
    
    # –°–æ–±–∏—Ä–∞–µ–º SEL BEFORE - –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    run(['ipmitool','-I','lanplus','-H',conf['bmc_ip'],
         '-U',conf['bmc_user'],'-P',conf['bmc_pass'],
         'sel','elist'], before)
    
    # –í–ê–ñ–ù–û: –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    # –ü–æ–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    import time
    time.sleep(2)
    
    # –°–æ–±–∏—Ä–∞–µ–º SEL AFTER - –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    run(['ipmitool','-I','lanplus','-H',conf['bmc_ip'],
         '-U',conf['bmc_user'],'-P',conf['bmc_pass'],
         'sel','elist'], after)
    
    # –í—ã—á–∏—Å–ª—è–µ–º diff –º–µ–∂–¥—É before –∏ after
    with before.open() as fb, after.open() as fa, diff.open('w') as fd:
        set_before = set(fb.readlines())
        new_entries_found = False
        
        for line in fa:
            if line not in set_before:
                fd.write(line)
                new_entries_found = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è - –∏—â–µ–º –≤–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
                line_lower = line.lower()
                if any(keyword in line_lower for keyword in [
                    'fatal', 'critical', 'thermal shutdown', 'thermal trip',
                    'overtemperature', 'overvoltage', 'undervoltage',
                    'power fail', 'system boot', 'watchdog', 'panic'
                ]):
                    RESULT_JSON['results']['sel'] = {
                        'status':'FAIL',
                        'details': {'critical_event_found': line.strip()}
                    }
                    RESULT_JSON['logs']['sel_diff'] = str(diff)
                    print_step("–ê–Ω–∞–ª–∏–∑ SEL", "FAIL")
                    return
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
        if new_entries_found:
            RESULT_JSON['results']['sel'] = {
                'status':'WARNING',
                'details': {'new_entries_found': 'Non-critical entries detected'}
            }
        else:
            RESULT_JSON['results']['sel'] = {
                'status':'PASS',
                'details': {'message': 'No new SEL entries detected'}
            }
    
    RESULT_JSON['logs']['sel_diff'] = str(diff)
    status = RESULT_JSON['results']['sel']['status']
    print_step("–ê–Ω–∞–ª–∏–∑ SEL", status)

def find_pci_devices(lshw_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ lshw –¥–∞–Ω–Ω—ã—Ö"""
    
    def extract_pci_from_node(node):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —É–∑–ª–∞ lshw"""
        devices = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª - PCIe —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if ('businfo' in node and node['businfo'].startswith('pci@') and 
            'description' in node):
            devices.append({
                'bdf': node['businfo'].replace('pci@', '') + f" {node.get('description', 'Unknown')}",
                'description': node.get('description', 'Unknown device'),
                'class': node.get('description', 'Unknown'),
                'width': node.get('width', 'unknown'),
                'speed': node.get('speed', 'unknown')
            })
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        if 'children' in node:
            for child in node['children']:
                devices.extend(extract_pci_from_node(child))
        
        return devices
    
    return extract_pci_from_node(lshw_data)

def check_network_interfaces():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
    interfaces_status = {}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        result = subprocess.run(['ip', 'link', 'show'], capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ ip link show
            for line in result.stdout.splitlines():
                if ': ' in line and not line.startswith(' '):
                    # –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500"
                    parts = line.split(': ')
                    if len(parts) >= 2:
                        iface_name = parts[1].split('@')[0]  # —É–±–∏—Ä–∞–µ–º @if... –µ—Å–ª–∏ –µ—Å—Ç—å
                        if iface_name.startswith(('eth', 'ens', 'enp')):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ ethtool
                            try:
                                ethtool_result = subprocess.run(['ethtool', iface_name], 
                                                              capture_output=True, text=True, timeout=10)
                                if ethtool_result.returncode == 0:
                                    speed_line = next((l for l in ethtool_result.stdout.splitlines() 
                                                     if 'Speed:' in l), '')
                                    link_line = next((l for l in ethtool_result.stdout.splitlines() 
                                                    if 'Link detected:' in l), '')
                                    
                                    interfaces_status[iface_name] = {
                                        'speed': speed_line.split()[-1] if speed_line else 'unknown',
                                        'link': 'yes' in link_line.lower() if link_line else False,
                                        'status': 'UP' if 'UP' in line else 'DOWN'
                                    }
                                else:
                                    interfaces_status[iface_name] = {
                                        'error': f'ethtool failed: {ethtool_result.stderr.strip()}'
                                    }
                            except subprocess.TimeoutExpired:
                                interfaces_status[iface_name] = {'error': 'ethtool timeout'}
                            except Exception as e:
                                interfaces_status[iface_name] = {'error': f'ethtool error: {str(e)}'}
    except Exception as e:
        interfaces_status['error'] = f'Failed to get interface list: {str(e)}'
    
    return interfaces_status

def step_bmc_user(conf):
    """–®–∞–≥ 3. –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ BMC"""
    print_step("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC", "START")
    log = LOG_ROOT / 'bmc_user.log'
    user = conf['test_user']
    pwd  = conf['test_pass']
    
    try:
        out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                   '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                   'user', 'list'], log)
        
        user_exists = user in out
        uid = None
        
        if user_exists:
            # –ù–∞—Ö–æ–¥–∏–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for line in out.splitlines():
                if user in line and line.strip():
                    try:
                        uid = int(line.split()[0])
                        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {uid}")
                        break
                    except (ValueError, IndexError):
                        continue
        
        if not user_exists:
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ ID
            try:
                used_ids = []
                lines = out.splitlines()
                
                for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if line.strip() and line[0].isdigit():
                        try:
                            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º split() –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                            parts = line.split()
                            if len(parts) >= 2:
                                uid_str = parts[0].strip()
                                name_col = parts[1].strip()
                                
                                if uid_str.isdigit():
                                    uid_num = int(uid_str)
                                    
                                    # –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –∏–º–µ–Ω–∏ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ - —Å–ª–æ—Ç –∑–∞–Ω—è—Ç
                                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
                                    empty_indicators = ['', '(Empty', '(empty', '<empty>', 'Empty', 'empty', 'unused', 'Unused']
                                    if name_col and not any(empty_ind in name_col for empty_ind in empty_indicators):
                                        used_ids.append(uid_num)
                                        print(f"[DEBUG] –°–ª–æ—Ç {uid_num} –∑–∞–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: '{name_col}'")
                                    else:
                                        print(f"[DEBUG] –°–ª–æ—Ç {uid_num} —Å–≤–æ–±–æ–¥–µ–Ω ('{name_col}')")
                                        
                        except (ValueError, IndexError) as e:
                            print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: '{line}' - {e}")
                            continue
                
                # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π ID –Ω–∞—á–∏–Ω–∞—è —Å 3 (1-–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π, 2-–æ–±—ã—á–Ω–æ admin)
                uid = 3
                while uid in used_ids and uid <= 16:  # IPMI –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                    uid += 1
                
                if uid > 16:
                    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    raise RuntimeError('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π BMC (–≤—Å–µ —Å–ª–æ—Ç—ã 3-16 –∑–∞–Ω—è—Ç—ã)')
                        
            except Exception as e:
                raise RuntimeError(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π BMC: {e}')
            
            print(f"[DEBUG] –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} —Å ID {uid}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cmds = [
                ['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                 'user','set','name',str(uid),user],
                ['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                 'user','set','password',str(uid),pwd]
            ]
            for c in cmds:
                run(c, log, timeout=60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if uid is not None:
            print(f"[DEBUG] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} (ID {uid})")
            privilege_cmds = [
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Administrator privilege
                ['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                 'user','priv',str(uid),'4','1'],
                # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                 'user','enable',str(uid)],
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É —Å IPMI messaging
                ['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                 'channel','setaccess','1',str(uid),'ipmi=on','privilege=4']
            ]
            for c in privilege_cmds:
                run(c, log, timeout=60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            check_result = run(['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                               'channel','getaccess','1',str(uid)], log, timeout=30)
            
            if 'ADMINISTRATOR' in check_result and 'enabled' in check_result:
                print(f"[DEBUG] –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"[WARNING] –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                RESULT_JSON['warnings'].append(f'–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redfish —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            redfish_result = run(['curl','-k','-u',f'{user}:{pwd}','-w','%{http_code}',
                                 f'https://{conf["bmc_ip"]}/redfish/v1/'], log, timeout=30, accept_rc=[0, 22])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∞)
            lines = redfish_result.strip().splitlines()
            if lines:
                last_line = lines[-1]
                if last_line.isdigit():
                    http_code = int(last_line)
                    if http_code == 200:
                        print(f"[DEBUG] Redfish –¥–æ—Å—Ç—É–ø–µ–Ω, HTTP –∫–æ–¥: {http_code} - SUCCESS")
                    elif http_code == 401:
                        print(f"[DEBUG] Redfish –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞, HTTP –∫–æ–¥: {http_code}")
                        RESULT_JSON['warnings'].append(f'Redfish –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}')
                    else:
                        print(f"[DEBUG] Redfish –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, HTTP –∫–æ–¥: {http_code}")
                        RESULT_JSON['warnings'].append(f'Redfish API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥: {http_code}')
                else:
                    print(f"[DEBUG] Redfish –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            # Redfish –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"[DEBUG] Redfish –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            RESULT_JSON['warnings'].append(f'Redfish API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}')
        
        RESULT_JSON['results']['bmc_user'] = {'status': 'PASS'}
        print_step("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC", "PASS")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC: {e}")
        RESULT_JSON['results']['bmc_user'] = {
            'status': 'FAIL',
            'details': f'error: {str(e)}'
        }
        print_step("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC", "FAIL")

def step_cleanup_bmc_user(conf):
    """–®–∞–≥ –æ—á–∏—Å—Ç–∫–∏: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC"""
    print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC", "START")
    log = LOG_ROOT / 'cleanup_bmc_user.log'
    user = conf['test_user']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                   '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                   'user', 'list'], log)
        
        uid = None
        # –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for line in out.splitlines():
            if user in line and line.strip():
                try:
                    uid = int(line.split()[0])
                    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —Å ID {uid} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    break
                except (ValueError, IndexError):
                    continue
        
        if uid is not None:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cleanup_success = False
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–µ–Ω—è–µ–º –∏–º—è –Ω–∞ "unused"
            try:
                run(['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                     'user','set','name',str(uid),'unused'], log, timeout=30)
                cleanup_success = True
                print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ 'unused'")
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ 'unused': {e}, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not cleanup_success:
                try:
                    run(['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                         'user','disable',str(uid)], log, timeout=30)
                    cleanup_success = True
                    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Ç–∫–ª—é—á–µ–Ω")
                except Exception as e:
                    print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            import secrets
            random_password = secrets.token_hex(10)  # 10 hex bytes = 20 —Å–∏–º–≤–æ–ª–æ–≤ (–ø—Ä–µ–¥–µ–ª IPMI)
            try:
                run(['ipmitool','-I','lanplus','-H',conf['bmc_ip'],'-U',conf['bmc_user'],'-P',conf['bmc_pass'],
                     'user','set','password',str(uid),random_password], log, timeout=30)
                print(f"[DEBUG] –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π")
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å: {e}")
            
            if cleanup_success:
                RESULT_JSON['results']['cleanup_bmc_user'] = {'status': 'PASS', 'details': f'User {user} cleaned up (slot {uid})'}
            else:
                RESULT_JSON['results']['cleanup_bmc_user'] = {'status': 'WARNING', 'details': f'User {user} partially cleaned (slot {uid})'}
        else:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            RESULT_JSON['results']['cleanup_bmc_user'] = {'status': 'SKIP', 'details': f'User {user} not found'}
        
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC", "PASS")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC: {e}")
        RESULT_JSON['results']['cleanup_bmc_user'] = {
            'status': 'WARNING',
            'details': f'Cleanup error: {str(e)}'
        }
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC", "WARNING")

def step_hw_diff():
    """–®–∞–≥ 4.2.6. –ü–æ–ª–Ω—ã–π HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º (baseline vs current)"""
    print_step("HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º", "START")
    
    if not HW_DIFF_AVAILABLE:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å HW-Diff –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø")
        RESULT_JSON['results']['hw_diff'] = {
            'status': 'SKIP',
            'details': {'message': 'HW-Diff module not available'}
        }
        print_step("HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º", "SKIP")
        return
    
    try:
        # –ü—É—Ç—å –∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        baseline_path = REF_ROOT / 'inventory_RSMB-MS93.json'
        
        if not baseline_path.exists():
            print(f"‚ö†Ô∏è  –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {baseline_path}")
            RESULT_JSON['results']['hw_diff'] = {
                'status': 'SKIP',
                'details': {'message': f'Baseline config not found: {baseline_path}'}
            }
            print_step("HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º", "SKIP")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        hw_diff = HardwareDiff(str(baseline_path))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        diff_results = hw_diff.perform_full_diff()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        diff_report_path = LOG_ROOT / 'hw_diff_report.json'
        hw_diff.save_diff_report(str(diff_report_path))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        status = diff_results['overall_status']
        RESULT_JSON['results']['hw_diff'] = {
            'status': status,
            'details': {
                'components_checked': diff_results['summary']['total_components_checked'],
                'components_passed': diff_results['summary']['components_passed'],
                'components_warning': diff_results['summary']['components_warning'],
                'components_failed': diff_results['summary']['components_failed'],
                'total_differences': diff_results['summary']['total_differences'],
                'baseline_date': diff_results['scan_info']['baseline_date'],
                'scan_date': diff_results['scan_info']['current_scan_date']
            }
        }
        RESULT_JSON['logs']['hw_diff'] = str(diff_report_path)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
        for component_name, component_result in diff_results['component_results'].items():
            if component_result['differences']:
                print(f"  ‚ö†Ô∏è  {component_name}: {len(component_result['differences'])} —Ä–∞–∑–ª–∏—á–∏–π")
                for diff in component_result['differences'][:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–ª–∏—á–∏—è
                    print(f"    ‚Ä¢ {diff}")
                if len(component_result['differences']) > 3:
                    print(f"    ‚Ä¢ ... –∏ –µ—â—ë {len(component_result['differences']) - 3} —Ä–∞–∑–ª–∏—á–∏–π")
        
        print_step("HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º", status)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HW-Diff: {e}")
        RESULT_JSON['results']['hw_diff'] = {
            'status': 'ERROR',
            'details': {'error': str(e)}
        }
        print_step("HW-Diff —Å —ç—Ç–∞–ª–æ–Ω–æ–º", "ERROR")

def enhanced_battery_check(conf):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ CR2032 —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤"""
    battery_info = {
        'methods_tried': [],
        'status': 'UNKNOWN',
        'voltage': None,
        'details': {}
    }
    
    # –ú–µ—Ç–æ–¥ 1: IPMI —Å–µ–Ω—Å–æ—Ä P_VBAT_2600
    try:
        result = subprocess.run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                               '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                               'sensor', 'get', 'P_VBAT_2600'], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0 and 'Sensor Reading' in result.stdout:
            # –ü–∞—Ä—Å–∏–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–∑ –≤—ã–≤–æ–¥–∞
            for line in result.stdout.splitlines():
                if 'Sensor Reading' in line:
                    try:
                        voltage_str = line.split(':')[1].strip().split()[0]
                        voltage = float(voltage_str)
                        battery_info['voltage'] = voltage
                        battery_info['methods_tried'].append('ipmi_sensor')
                        battery_info['details']['ipmi_reading'] = line.strip()
                        
                        # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
                        if voltage >= 3.0:
                            battery_info['status'] = 'PASS'
                        elif voltage >= 2.5:
                            battery_info['status'] = 'WARNING'
                        else:
                            battery_info['status'] = 'FAIL'
                        break
                    except (ValueError, IndexError):
                        continue
                        
        if battery_info['status'] == 'UNKNOWN':
            battery_info['methods_tried'].append('ipmi_sensor_failed')
            
    except Exception as e:
        battery_info['methods_tried'].append(f'ipmi_sensor_error: {str(e)}')
    
    # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ /sys/class/power_supply
    if battery_info['status'] == 'UNKNOWN':
        try:
            battery_paths = glob.glob('/sys/class/power_supply/*/voltage_now')
            for path in battery_paths:
                try:
                    with open(path) as f:
                        voltage_uv = int(f.read().strip())
                        voltage_v = voltage_uv / 1000000
                        if 2.5 < voltage_v < 4.0:  # –¥–∏–∞–ø–∞–∑–æ–Ω CR2032
                            battery_info['voltage'] = voltage_v
                            battery_info['status'] = 'PASS' if voltage_v >= 3.0 else 'WARNING'
                            battery_info['methods_tried'].append('sysfs_power_supply')
                            battery_info['details']['sysfs_path'] = path
                            break
                except (ValueError, IOError):
                    continue
                    
            if battery_info['status'] == 'UNKNOWN':
                battery_info['methods_tried'].append('sysfs_power_supply_empty')
                
        except Exception as e:
            battery_info['methods_tried'].append(f'sysfs_error: {str(e)}')
    
    # –ú–µ—Ç–æ–¥ 3: ACPI —á–µ—Ä–µ–∑ /proc/acpi
    if battery_info['status'] == 'UNKNOWN':
        try:
            acpi_paths = glob.glob('/proc/acpi/battery/*/state')
            if acpi_paths:
                battery_info['methods_tried'].append('acpi_found')
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ ACPI –¥–∞–Ω–Ω—ã—Ö
            else:
                battery_info['methods_tried'].append('acpi_not_found')
        except Exception as e:
            battery_info['methods_tried'].append(f'acpi_error: {str(e)}')
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ IPMI —Å–µ–Ω—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–ª
    if battery_info['status'] == 'UNKNOWN' and 'ipmi_sensor' in battery_info['methods_tried']:
        battery_info['status'] = 'WARNING'
        battery_info['details']['message'] = 'IPMI sensor detected but voltage not parsed'
    
    return battery_info

def analyze_network_connectivity():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    connectivity_info = {
        'interfaces': {},
        'summary': {},
        'recommendations': []
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        result = subprocess.run(['ip', 'link', 'show'], capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            current_interface = None
            
            for line in result.stdout.splitlines():
                if ': ' in line and not line.startswith(' '):
                    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    parts = line.split(': ')
                    if len(parts) >= 2:
                        iface_name = parts[1].split('@')[0]
                        if iface_name.startswith(('eth', 'ens', 'enp')):
                            current_interface = iface_name
                            connectivity_info['interfaces'][iface_name] = {
                                'name': iface_name,
                                'status': 'UP' if 'UP' in line else 'DOWN',
                                'flags': line,
                                'link_status': 'unknown',
                                'speed': 'unknown',
                                'duplex': 'unknown',
                                'mac_address': 'unknown'
                            }
                elif current_interface and 'link/ether' in line:
                    # –°—Ç—Ä–æ–∫–∞ —Å MAC –∞–¥—Ä–µ—Å–æ–º
                    parts = line.strip().split()
                    if len(parts) >= 2:
                        connectivity_info['interfaces'][current_interface]['mac_address'] = parts[1]
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ ethtool
            for iface_name in connectivity_info['interfaces']:
                try:
                    ethtool_result = subprocess.run(['ethtool', iface_name], 
                                                  capture_output=True, text=True, timeout=10)
                    if ethtool_result.returncode == 0:
                        ethtool_output = ethtool_result.stdout
                        
                        # –ü–∞—Ä—Å–∏–º ethtool –¥–∞–Ω–Ω—ã–µ
                        for line in ethtool_output.splitlines():
                            line = line.strip()
                            if 'Speed:' in line:
                                connectivity_info['interfaces'][iface_name]['speed'] = line.split(':', 1)[1].strip()
                            elif 'Duplex:' in line:
                                connectivity_info['interfaces'][iface_name]['duplex'] = line.split(':', 1)[1].strip()
                            elif 'Link detected:' in line:
                                link_status = line.split(':', 1)[1].strip()
                                connectivity_info['interfaces'][iface_name]['link_status'] = link_status
                                
                                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ "no link"
                                if 'no' in link_status.lower():
                                    if 'cable' in link_status.lower():
                                        connectivity_info['interfaces'][iface_name]['link_reason'] = 'no_cable'
                                    else:
                                        connectivity_info['interfaces'][iface_name]['link_reason'] = 'no_link'
                                else:
                                    connectivity_info['interfaces'][iface_name]['link_reason'] = 'link_up'
                                    
                except subprocess.TimeoutExpired:
                    connectivity_info['interfaces'][iface_name]['ethtool_error'] = 'timeout'
                except Exception as e:
                    connectivity_info['interfaces'][iface_name]['ethtool_error'] = str(e)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        total_interfaces = len(connectivity_info['interfaces'])
        interfaces_up = sum(1 for iface in connectivity_info['interfaces'].values() if iface['status'] == 'UP')
        interfaces_with_link = sum(1 for iface in connectivity_info['interfaces'].values() 
                                 if iface.get('link_reason') == 'link_up')
        interfaces_no_cable = sum(1 for iface in connectivity_info['interfaces'].values() 
                                if iface.get('link_reason') == 'no_cable')
        
        connectivity_info['summary'] = {
            'total_interfaces': total_interfaces,
            'interfaces_up': interfaces_up,
            'interfaces_with_link': interfaces_with_link,
            'interfaces_no_cable': interfaces_no_cable,
            'interfaces_other_issues': total_interfaces - interfaces_no_cable - interfaces_with_link
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤
        if interfaces_no_cable == total_interfaces and total_interfaces > 0:
            connectivity_info['recommendations'].append('All network interfaces are UP without cables - expected for test environment')
            connectivity_info['overall_status'] = 'PASS'  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å WARNING –Ω–∞ PASS
        elif interfaces_with_link > 0:
            connectivity_info['recommendations'].append('Some interfaces have active links - network connectivity available')
            connectivity_info['overall_status'] = 'PASS'
        elif interfaces_up == total_interfaces:
            connectivity_info['recommendations'].append('All interfaces are administratively UP')
            connectivity_info['overall_status'] = 'PASS'  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å WARNING –Ω–∞ PASS
        else:
            connectivity_info['recommendations'].append('Some interfaces are DOWN - check network configuration')
            connectivity_info['overall_status'] = 'WARNING'  # –¢–æ–ª—å–∫–æ —ç—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è WARNING
            
    except Exception as e:
        connectivity_info['error'] = str(e)
        connectivity_info['overall_status'] = 'ERROR'
    
    return connectivity_info

def classify_pci_devices_enhanced(pci_devices):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ vs –≤–Ω–µ—à–Ω–∏–µ"""
    classification = {
        'onboard_devices': [],
        'expansion_cards': [],
        'cpu_integrated': [],
        'chipset_devices': [],
        'classification_summary': {}
    }
    
    for device in pci_devices:
        bus_info = device.get('bus_info', '')
        description = device.get('description', '').lower()
        vendor = device.get('vendor', '').lower()
        device_class = device.get('class', 'unknown')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º PCI –∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        pci_address = bus_info.replace('pci@', '') if bus_info.startswith('pci@') else bus_info
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ PCI –∞–¥—Ä–µ—Å—É –∏ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_category = 'unknown'
        
        # CPU –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–±—ã—á–Ω–æ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —à–∏–Ω–∞—Ö 7e:, 7f:, fe:, ff:)
        if any(pci_address.startswith(prefix) for prefix in ['7e:', '7f:', 'fe:', 'ff:']):
            device_category = 'cpu_integrated'
            classification['cpu_integrated'].append(device)
            
        # Chipset —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–±—ã—á–Ω–æ –Ω–∞ —à–∏–Ω–µ 00: - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã)
        elif pci_address.startswith('00:'):
            device_category = 'chipset_devices'
            classification['chipset_devices'].append(device)
                
        # –°–µ—Ç–µ–≤—ã–µ –∫–∞—Ä—Ç—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∏–Ω—ã
        elif device_class == 'network' and 'ethernet' in description:
            # Intel i350 (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è) - —à–∏–Ω–∞ 01:
            if pci_address.startswith('01:'):
                device_category = 'onboard_devices'
                classification['onboard_devices'].append(device)
            # Intel X710 (–∫–∞—Ä—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) - —à–∏–Ω–∞ 52:
            elif pci_address.startswith('52:'):
                device_category = 'expansion_cards'
                classification['expansion_cards'].append(device)
            # Mellanox ConnectX-5 (–∫–∞—Ä—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) - —à–∏–Ω–∞ e4:
            elif pci_address.startswith('e4:'):
                device_category = 'expansion_cards'
                classification['expansion_cards'].append(device)
            else:
                device_category = 'onboard_devices'
                classification['onboard_devices'].append(device)
                
        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        elif device_class == 'storage' or 'nvme' in description or 'sata' in description:
            # NVMe –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —à–∏–Ω–µ - –∫–∞—Ä—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if pci_address.startswith('d4:'):
                device_category = 'expansion_cards'
                classification['expansion_cards'].append(device)
            # SATA –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –Ω–∞ —à–∏–Ω–µ 00: - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
            else:
                device_category = 'chipset_devices'
                classification['chipset_devices'].append(device)
                
        # VGA –∏ display —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        elif device_class == 'display':
            # ASPEED VGA –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —à–∏–Ω–µ 03: - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è
            if pci_address.startswith('03:'):
                device_category = 'onboard_devices'
                classification['onboard_devices'].append(device)
            else:
                device_category = 'onboard_devices'
                classification['onboard_devices'].append(device)
                
        # –ú–æ—Å—Ç—ã PCI
        elif device_class == 'bridge':
            device_category = 'chipset_devices'
            classification['chipset_devices'].append(device)
                
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —à–∏–Ω–∞—Ö - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ CPU-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        elif any(pci_address.startswith(prefix) for prefix in 
                ['15:', '29:', '3d:', '51:', '65:', '79:', '80:', '97:', 'aa:', 'bd:', 'd0:', 'e3:', 'f6:']):
            device_category = 'cpu_integrated'
            classification['cpu_integrated'].append(device)
            
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
        else:
            device_category = 'onboard_devices'
            classification['onboard_devices'].append(device)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        device['category'] = device_category
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
    classification['classification_summary'] = {
        'total_devices': len(pci_devices),
        'onboard_devices': len(classification['onboard_devices']),
        'expansion_cards': len(classification['expansion_cards']),
        'cpu_integrated': len(classification['cpu_integrated']),
        'chipset_devices': len(classification['chipset_devices'])
    }
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    expansion_by_type = {}
    for device in classification['expansion_cards']:
        device_type = device.get('class', 'unknown')
        if device_type not in expansion_by_type:
            expansion_by_type[device_type] = []
        expansion_by_type[device_type].append(device)
    
    classification['expansion_by_type'] = expansion_by_type
    
    return classification

def print_final_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø STAGE-2")
    print("="*80)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
    pass_count = sum(1 for r in RESULT_JSON['results'].values() if r.get('status') == 'PASS')
    fail_count = sum(1 for r in RESULT_JSON['results'].values() if r.get('status') == 'FAIL')
    warning_count = sum(1 for r in RESULT_JSON['results'].values() if r.get('status') == 'WARNING')
    skip_count = sum(1 for r in RESULT_JSON['results'].values() if r.get('status') == 'SKIP')
    error_count = sum(1 for r in RESULT_JSON['results'].values() if r.get('status') == 'ERROR')
    
    total_tests = len(RESULT_JSON['results'])
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if fail_count > 0 or error_count > 0:
        overall_status = "FAIL"
        status_symbol = "‚ùå"
    elif warning_count > 0:
        overall_status = "PASS WITH WARNINGS"
        status_symbol = "‚ö†Ô∏è"
    else:
        overall_status = "PASS"
        status_symbol = "‚úÖ"
    
    print(f"\n{status_symbol} –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {overall_status}")
    print(f"\n–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {RESULT_JSON['serial']}")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {RESULT_JSON.get('duration_sec', 0)} —Å–µ–∫")
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ({total_tests} —Ç–µ—Å—Ç–æ–≤):")
    print(f"  ‚úÖ PASS:    {pass_count}")
    print(f"  ‚ùå FAIL:    {fail_count}")
    print(f"  ‚ö†Ô∏è  WARNING: {warning_count}")
    print(f"  ‚è≠Ô∏è  SKIP:    {skip_count}")
    print(f"  üö´ ERROR:   {error_count}")
    
    # –î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    if fail_count > 0:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        for test_name, result in RESULT_JSON['results'].items():
            if result.get('status') == 'FAIL':
                print(f"  ‚Ä¢ {test_name}: {result.get('details', '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')}")
                # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–æ–≤
                if test_name == 'sensor_readings' and isinstance(result.get('details'), dict):
                    details = result['details']
                    if 'category_summary' in details:
                        for category, cat_data in details['category_summary'].items():
                            if cat_data.get('status') == 'FAIL':
                                print(f"    - {category}: {cat_data.get('failed', 0)} —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏")
    
    # –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if warning_count > 0:
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for test_name, result in RESULT_JSON['results'].items():
            if result.get('status') == 'WARNING':
                print(f"  ‚Ä¢ {test_name}: {result.get('details', '–ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è')}")
    
    # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if skip_count > 0:
        print("\n‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
        for test_name, result in RESULT_JSON['results'].items():
            if result.get('status') == 'SKIP':
                details = result.get('details', {})
                if isinstance(details, dict):
                    message = details.get('message', '–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω')
                else:
                    message = str(details)
                print(f"  ‚Ä¢ {test_name}: {message}")
    
    print("\n" + "="*80)

def step_riser_check(conf):
    """–®–∞–≥ 4.2.6.3.6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–∑–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ TRD"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–∑–µ—Ä–æ–≤ (FRU)", "START")
    log = LOG_ROOT / 'riser_check.log'
    
    try:
        results = {
            'detected_risers': [],
            'fru_validation': {},
            'total_risers_found': 0,
            'status': 'PASS'
        }
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º FRU –∑–∞–ø–∏—Å–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ä–∞–π–∑–µ—Ä–æ–≤
        with log.open('w') as f:
            f.write('=== RISER CARD FRU VALIDATION ===\n\n')
            
            for fru_id in range(1, 10):  # FRU ID 1-9 –¥–ª—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                try:
                    fru_out = run(['ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
                                  '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
                                  'fru', 'print', str(fru_id)], log, timeout=30, accept_rc=[0, 1])
                    
                    if 'Product Name' in fru_out and fru_out.strip():
                        f.write(f'\n--- FRU ID {fru_id} ---\n')
                        f.write(fru_out)
                        
                        fru_data = {}
                        for line in fru_out.splitlines():
                            if ':' in line:
                                key, value = line.split(':', 1)
                                key = key.strip()
                                value = value.strip()
                                
                                if 'Product Name' in key:
                                    fru_data['product_name'] = value
                                elif 'Product Manufacturer' in key:
                                    fru_data['manufacturer'] = value
                                elif 'Product Part Number' in key:
                                    fru_data['part_number'] = value
                                elif 'Product Serial' in key:
                                    fru_data['serial_number'] = value
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞–π–∑–µ—Ä–æ–º
                        product_name = fru_data.get('product_name', '').upper()
                        if ('RISER' in product_name or 
                            'RSMB-MS93' in product_name or
                            'RISER' in fru_data.get('part_number', '').upper()):
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç —Ä–∞–π–∑–µ—Ä–∞
                            if 'RISER-1' in product_name or '1A00-11' in fru_data.get('part_number', ''):
                                slot = 'RISER_SLOT_1'
                            elif 'RISER-2' in product_name or '1A00-22' in fru_data.get('part_number', ''):
                                slot = 'RISER_SLOT_2'
                            elif 'RISER-3' in product_name or '1A00-33' in fru_data.get('part_number', ''):
                                slot = 'RISER_SLOT_3'
                            else:
                                slot = f'RISER_SLOT_{fru_id}'
                            
                            riser_info = {
                                'fru_id': fru_id,
                                'slot': slot,
                                'populated': True,
                                **fru_data
                            }
                            
                            results['detected_risers'].append(riser_info)
                            results['total_risers_found'] += 1
                            
                            # –í–∞–ª–∏–¥–∞—Ü–∏—è FRU –¥–∞–Ω–Ω—ã—Ö
                            validation = {}
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                            required_fields = ['product_name', 'manufacturer', 'part_number', 'serial_number']
                            for field in required_fields:
                                if not fru_data.get(field) or fru_data.get(field) in ['', 'N/A', 'Not Available']:
                                    validation[f'{field}_missing'] = True
                                    results['status'] = 'FAIL'
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                            expected_manufacturer = 'GIGA-BYTE TECHNOLOGY CO., LTD'
                            if fru_data.get('manufacturer', '') != expected_manufacturer:
                                validation['manufacturer_mismatch'] = {
                                    'expected': expected_manufacturer,
                                    'actual': fru_data.get('manufacturer', '')
                                }
                                results['status'] = 'WARNING'
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ part number
                            part_number = fru_data.get('part_number', '')
                            if not part_number.startswith('25VH1-1A00-'):
                                validation['part_number_format_error'] = {
                                    'expected_prefix': '25VH1-1A00-',
                                    'actual': part_number
                                }
                                results['status'] = 'WARNING'
                            
                            results['fru_validation'][slot] = validation
                            
                            f.write(f'\n>>> DETECTED RISER: {slot}\n')
                            f.write(f'Product: {fru_data.get("product_name", "N/A")}\n')
                            f.write(f'Manufacturer: {fru_data.get("manufacturer", "N/A")}\n')
                            f.write(f'Part Number: {fru_data.get("part_number", "N/A")}\n')
                            f.write(f'Serial: {fru_data.get("serial_number", "N/A")}\n')
                            
                            if validation:
                                f.write(f'Validation Issues: {validation}\n')
                        
                except subprocess.TimeoutExpired:
                    f.write(f'FRU ID {fru_id}: Timeout\n')
                    continue
                except Exception as e:
                    f.write(f'FRU ID {fru_id}: Error - {str(e)}\n')
                    continue
            
            f.write(f'\n=== SUMMARY ===\n')
            f.write(f'Total risers detected: {results["total_risers_found"]}\n')
            f.write(f'Overall status: {results["status"]}\n')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if results['total_risers_found'] == 0:
            results['status'] = 'WARNING'
            results['message'] = 'No riser cards detected via FRU - may be missing or not FRU-enabled'
        elif results['status'] == 'PASS':
            results['message'] = f'All {results["total_risers_found"]} riser cards validated successfully'
        
        RESULT_JSON['results']['riser_check'] = {'status': results['status'], 'details': results}
        RESULT_JSON['logs']['riser_check'] = str(log)
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–∑–µ—Ä–æ–≤ (FRU)", results['status'])
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–π–∑–µ—Ä–æ–≤: {e}")
        RESULT_JSON['results']['riser_check'] = {
            'status': 'ERROR',
            'details': {'error': str(e)}
        }
        print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–∑–µ—Ä–æ–≤ (FRU)", "ERROR")

# ---------- main -----------------------------------------------------------

def main():
    global LOG_ROOT
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
    try:
        check_dependencies()
    except RuntimeError as e:
        print(f'–û–®–ò–ë–ö–ê: {e}', file=sys.stderr)
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if os.geteuid() != 0:
        RESULT_JSON['warnings'].append('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –æ—Ç root, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å')
    
    try:
        conf = load_json(CONF_PATH)
        RESULT_JSON['serial'] = get_serial_from_fru(conf)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LOG_ROOT –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        script_dir = Path(__file__).parent.absolute()
        timestamp = dt.datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')
        LOG_ROOT = script_dir / 'logs' / f"{RESULT_JSON['serial']}_{timestamp}"
        LOG_ROOT.mkdir(parents=True, exist_ok=True)
        
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É—è run()
        qvl  = load_json(REF_ROOT / 'firmware_versions.json')
        reference = load_json(REF_ROOT / 'inventory_RSMB-MS93.json')
        sensor_ref = load_json(REF_ROOT / 'sensor_limits.json')
    except (FileNotFoundError, ValueError) as e:
        RESULT_JSON['warnings'].append(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}')
        print(f'–û–®–ò–ë–ö–ê: {e}', file=sys.stderr)
        sys.exit(1)

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–¢ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –¥–ª—è SEL –∞–Ω–∞–ª–∏–∑–∞
        step_init(conf)
        step_bmc_fw(conf, qvl)
        step_bios_fw(conf, qvl)
        step_cpld_fpga_vrm_check(conf, qvl)
        step_bmc_user(conf)
        step_detailed_inventory(conf, reference)
        step_riser_check(conf)
        step_sensor_readings(conf, sensor_ref)
        step_flash_macs_disabled(conf)
        step_vga_test(conf)
        step_fp1_test(conf)
        step_i3c_scan(conf)
        
        # SEL –∞–Ω–∞–ª–∏–∑ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –ø–µ—Ä–µ–¥ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ before/after
        # –ù–æ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ step_sel_analyse –∏–º–µ–µ—Ç —Å–≤–æ–π timing –≤–Ω—É—Ç—Ä–∏
        # –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤
        step_stress(conf)
        step_sel_analyse(conf)
        
        # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è BMC
        step_cleanup_bmc_user(conf)
        step_hw_diff()
    except Exception as exc:
        RESULT_JSON['warnings'].append(str(exc))

    RESULT_JSON['end'] = dt.datetime.now(timezone.utc).isoformat()
    RESULT_JSON['duration_sec'] = int(dt.datetime.fromisoformat(RESULT_JSON['end']).timestamp()
                                      - dt.datetime.fromisoformat(RESULT_JSON['start']).timestamp())

    report_path = LOG_ROOT / 'report_stage2.json'
    with report_path.open('w', encoding='utf-8') as f:
        json.dump(RESULT_JSON, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    print_final_summary()
    
    print(f'\nREPORT json: {report_path}')
    print(f'LOGS directory: {LOG_ROOT}')

if __name__ == '__main__':
    main()
