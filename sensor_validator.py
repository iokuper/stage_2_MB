#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤ BMC —Å–æ–≥–ª–∞—Å–Ω–æ TRD 4.2.8.2.1-4.2.8.2.4
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π sensor_limits.json —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ–Ω—Å–æ—Ä–∞–º–∏
"""

import json
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Tuple, Optional
from datetime import datetime

class SensorValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ BMC —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –ø—Ä–µ–¥–µ–ª–∞–º"""
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–µ–Ω—Å–æ—Ä–æ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    ACCEPTABLE_STATUSES = {'ok', 'nc'}  # ok = OK, nc = No Contact (–¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤)
    
    # –°—Ç–∞—Ç—É—Å—ã, –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º (nr = No Reading - –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
    WARNING_STATUSES = {'nr', 'ns'}  # nr = No Reading, ns = Not Specified
    
    def __init__(self, limits_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        
        Args:
            limits_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤
        """
        self.limits_file = Path(limits_file)
        self.limits = self._load_limits()
        self.validation_results = {}
        
    def _load_limits(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–µ–ª–æ–≤ —Å–µ–Ω—Å–æ—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if not self.limits_file.exists():
            raise FileNotFoundError(f'–§–∞–π–ª –ø—Ä–µ–¥–µ–ª–æ–≤ —Å–µ–Ω—Å–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.limits_file}')
        
        with self.limits_file.open('r', encoding='utf-8') as f:
            return json.load(f)
    
    def _is_sensor_status_ok(self, status: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–Ω—Å–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é OK —Å—Ç–∞—Ç—É—Å—ã)
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —Å–µ–Ω—Å–æ—Ä–∞ –∏–∑ ipmitool
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
        """
        return status.lower() in self.ACCEPTABLE_STATUSES
    
    def _is_sensor_status_warning(self, status: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–Ω—Å–æ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —Å–µ–Ω—Å–æ—Ä–∞ –∏–∑ ipmitool
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–æ–ø—É—Å—Ç–∏–º –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        """
        return status.lower() in self.WARNING_STATUSES
    
    def _parse_sensor_value(self, value_str: str) -> Optional[float]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        
        Args:
            value_str: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞
            
        Returns:
            –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        value_lower = value_str.lower().strip()
        
        # –ó–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–Ω–∞—á–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if value_lower in ['na', 'disabled', 'n/a', 'not available', 'not specified', 'unknown', '']:
            return None
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∞ –∑–∞–ø—è—Ç–æ–π –Ω–∞ —Ç–æ—á–∫—É)
            normalized_value = value_str.replace(',', '.')
            return float(normalized_value)
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
    
    def collect_sensor_data(self, conf: Dict[str, str]) -> Dict[str, Dict]:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ BMC
        
        Args:
            conf: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ BMC (bmc_ip, bmc_user, bmc_pass)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤: {sensor_name: {value, unit, status}}
        
        Raises:
            RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
        """
        print("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ BMC...")
        
        result = subprocess.run([
            'ipmitool', '-I', 'lanplus', '-H', conf['bmc_ip'],
            '-U', conf['bmc_user'], '-P', conf['bmc_pass'],
            'sensor', 'list'
        ], capture_output=True, text=True, timeout=60)
        
        if result.returncode != 0:
            raise RuntimeError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤: {result.stderr}')
        
        sensors = {}
        for line in result.stdout.splitlines():
            if '|' in line:
                parts = line.split('|')
                if len(parts) >= 4:
                    name = parts[0].strip()
                    value = parts[1].strip()
                    unit = parts[2].strip()
                    status = parts[3].strip()
                    
                    sensors[name] = {
                        'value': value,
                        'unit': unit,
                        'status': status,
                        'raw_line': line.strip()
                    }
        
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(sensors)} —Å–µ–Ω—Å–æ—Ä–æ–≤")
        return sensors
    
    def _create_validation_result_dict(self) -> Dict:
        """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return {
            'actually_checked': 0,  # –†–µ–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä—ã
            'passed_sensors': 0,
            'warning_sensors': 0,
            'failed_sensors': 0,
            'missing_sensors': 0,
            'skipped_sensors': 0,  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
            'violations': [],
            'status': 'PASS'
        }
    
    def validate_voltage_sensors(self, sensors: Dict[str, Dict]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ voltage_limits"""
        voltage_results = self._create_validation_result_dict()
        
        voltage_limits = self.limits.get('voltage_limits', {})
        
        for sensor_name, limits in voltage_limits.items():
            if sensor_name == 'comment':
                continue
            
            if sensor_name not in sensors:
                voltage_results['missing_sensors'] += 1
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'MISSING',
                    'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'
                })
                continue
            
            voltage_results['actually_checked'] += 1
            sensor_data = sensors[sensor_name]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ–Ω—Å–æ—Ä–∞
            if sensor_data['value'] == 'na':
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'UNAVAILABLE',
                    'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: value=na'
                })
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–Ω—Å–æ—Ä–∞
            if not self._is_sensor_status_ok(sensor_data['status']):
                if self._is_sensor_status_warning(sensor_data['status']):
                    voltage_results['warning_sensors'] += 1
                    voltage_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'STATUS_WARNING',
                        'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {sensor_data["status"]}'
                    })
                else:
                    voltage_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'STATUS_ERROR',
                        'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {sensor_data["status"]}'
                    })
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
            voltage = self._parse_sensor_value(sensor_data['value'])
            if voltage is None:
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'PARSE_ERROR',
                    'message': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏—è {sensor_name}: {sensor_data["value"]}'
                })
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–µ–ª–æ–≤
            min_limit = limits.get('min')
            max_limit = limits.get('max')
            warn_min_limit = limits.get('warn_min')
            warn_max_limit = limits.get('warn_max')
            
            if min_limit is not None and voltage < min_limit:
                voltage_results['failed_sensors'] += 1
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'UNDERVOLTAGE',
                    'value': voltage,
                    'limit': min_limit,
                    'message': f'{sensor_name}: {voltage}V < {min_limit}V (FAIL)'
                })
            elif max_limit is not None and voltage > max_limit:
                voltage_results['failed_sensors'] += 1
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'OVERVOLTAGE',
                    'value': voltage,
                    'limit': max_limit,
                    'message': f'{sensor_name}: {voltage}V > {max_limit}V (FAIL)'
                })
            elif warn_min_limit is not None and voltage < warn_min_limit:
                voltage_results['warning_sensors'] += 1
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'VOLTAGE_WARNING_LOW',
                    'value': voltage,
                    'limit': warn_min_limit,
                    'message': f'{sensor_name}: {voltage}V < {warn_min_limit}V (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)'
                })
            elif warn_max_limit is not None and voltage > warn_max_limit:
                voltage_results['warning_sensors'] += 1
                voltage_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'VOLTAGE_WARNING_HIGH',
                    'value': voltage,
                    'limit': warn_max_limit,
                    'message': f'{sensor_name}: {voltage}V > {warn_max_limit}V (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)'
                })
            else:
                voltage_results['passed_sensors'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if voltage_results['failed_sensors'] > 0:
            voltage_results['status'] = 'FAIL'
        elif voltage_results['missing_sensors'] > 0 or voltage_results['warning_sensors'] > 0:
            voltage_results['status'] = 'WARNING'
        
        return voltage_results
    
    def validate_temperature_sensors(self, sensors: Dict[str, Dict]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å–æ–≥–ª–∞—Å–Ω–æ temperature_limits"""
        temp_results = self._create_validation_result_dict()
        
        temp_limits = self.limits.get('temperature_limits', {})
        
        for sensor_name, limits in temp_limits.items():
            if sensor_name == 'comment':
                continue
            
            if sensor_name not in sensors:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–Ω—Å–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –∏–ª–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
                critical_sensors = self.limits.get('validation_rules', {}).get('critical_sensors', [])
                optional_sensors = self.limits.get('validation_rules', {}).get('optional_sensors', [])
                
                if sensor_name in critical_sensors:
                    temp_results['missing_sensors'] += 1
                    temp_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'MISSING_CRITICAL',
                        'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–Ω—Å–æ—Ä {sensor_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                    })
                elif sensor_name in optional_sensors:
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–Ω—Å–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    temp_results['skipped_sensors'] += 1
                    continue
                else:
                    # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–µ–Ω—Å–æ—Ä - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ warning
                    temp_results['missing_sensors'] += 1
                    temp_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'MISSING',
                        'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'
                    })
                continue
            
            temp_results['actually_checked'] += 1
            sensor_data = sensors[sensor_name]
            
            if sensor_data['value'] == 'na':
                # –î–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ 'na' –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
                status = sensor_data['status'].lower()
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ TRD
                if status in ['nc', 'nr']:  # nc = No Contact, nr = No Reading
                    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    temp_results['skipped_sensors'] += 1
                    continue
                elif status == 'ok':
                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å OK, –Ω–æ value=na - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞
                    temp_results['warning_sensors'] += 1
                    temp_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'SENSOR_DATA_INCONSISTENT',
                        'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name}: —Å—Ç–∞—Ç—É—Å OK, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞)'
                    })
                    continue
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —Å na - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                    optional_sensors = self.limits.get('validation_rules', {}).get('optional_sensors', [])
                    if sensor_name in optional_sensors:
                        temp_results['skipped_sensors'] += 1
                        continue
                    else:
                        temp_results['violations'].append({
                            'sensor': sensor_name,
                            'type': 'UNAVAILABLE',
                            'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: value=na, status={sensor_data["status"]}'
                        })
                        continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–Ω—Å–æ—Ä–∞
            if not self._is_sensor_status_ok(sensor_data['status']):
                if self._is_sensor_status_warning(sensor_data['status']):
                    temp_results['warning_sensors'] += 1
                    temp_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'STATUS_WARNING',
                        'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {sensor_data["status"]}'
                    })
                else:
                    temp_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'STATUS_ERROR',
                        'message': f'–°–µ–Ω—Å–æ—Ä {sensor_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {sensor_data["status"]}'
                    })
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            temperature = self._parse_sensor_value(sensor_data['value'])
            if temperature is None:
                temp_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'PARSE_ERROR',
                    'message': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã {sensor_name}: {sensor_data["value"]}'
                })
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–µ–ª–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            min_limit = limits.get('min')
            max_limit = limits.get('max')
            warn_limit = limits.get('warn')
            
            if min_limit is not None and temperature < min_limit:
                temp_results['failed_sensors'] += 1
                temp_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'UNDERTEMPERATURE',
                    'value': temperature,
                    'limit': min_limit,
                    'message': f'{sensor_name}: {temperature}¬∞C < {min_limit}¬∞C (–≤–æ–∑–º–æ–∂–µ–Ω –æ–±—Ä—ã–≤ –¥–∞—Ç—á–∏–∫–∞)'
                })
            elif max_limit is not None and temperature > max_limit:
                temp_results['failed_sensors'] += 1
                temp_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'OVERTEMPERATURE',
                    'value': temperature,
                    'limit': max_limit,
                    'message': f'{sensor_name}: {temperature}¬∞C > {max_limit}¬∞C (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–ï–†–ï–ì–†–ï–í!)'
                })
            elif warn_limit is not None and temperature > warn_limit:
                temp_results['warning_sensors'] += 1
                temp_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'WARNING_TEMPERATURE',
                    'value': temperature,
                    'limit': warn_limit,
                    'message': f'{sensor_name}: {temperature}¬∞C > {warn_limit}¬∞C (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)'
                })
            else:
                temp_results['passed_sensors'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if temp_results['failed_sensors'] > 0:
            temp_results['status'] = 'FAIL'
        elif temp_results['warning_sensors'] > 0 or temp_results['missing_sensors'] > 0:
            temp_results['status'] = 'WARNING'
        
        return temp_results
    
    def validate_fan_sensors(self, sensors: Dict[str, Dict]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤"""
        results = self._create_validation_result_dict()
        
        for sensor_name, sensor_data in sensors.items():
            if sensor_data['unit'].lower() == 'rpm':
                results['actually_checked'] += 1
                
                # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ RPM
                rpm_value = self._parse_sensor_value(sensor_data['value'])
                if rpm_value is None:
                    results['skipped_sensors'] += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ–Ω—Å–æ—Ä–∞
                if not self._is_sensor_status_ok(sensor_data['status']):
                    if self._is_sensor_status_warning(sensor_data['status']):
                        results['warning_sensors'] += 1
                    else:
                        results['failed_sensors'] += 1
                        results['violations'].append({
                            'sensor': sensor_name,
                            'value': rpm_value,
                            'status': sensor_data['status'],
                            'issue': f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞: {sensor_data["status"]}'
                        })
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã RPM (–º–∏–Ω–∏–º—É–º 100 RPM, –º–∞–∫—Å–∏–º—É–º 20000 RPM)
                if rpm_value < 100 or rpm_value > 20000:
                    results['failed_sensors'] += 1
                    results['violations'].append({
                        'sensor': sensor_name,
                        'value': rpm_value,
                        'issue': f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {rpm_value} RPM'
                    })
                else:
                    results['passed_sensors'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if results['failed_sensors'] > 0:
            results['status'] = 'FAIL'
        elif results['warning_sensors'] > 0:
            results['status'] = 'WARNING'
        else:
            results['status'] = 'PASS'
        
        return results
    
    def validate_power_sensors(self, sensors: Dict[str, Dict]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ power_limits"""
        results = self._create_validation_result_dict()
        
        for sensor_name, sensor_data in sensors.items():
            if sensor_data['unit'].lower() == 'watts':
                results['actually_checked'] += 1
                
                # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
                power_value = self._parse_sensor_value(sensor_data['value'])
                if power_value is None:
                    results['skipped_sensors'] += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ–Ω—Å–æ—Ä–∞
                if not self._is_sensor_status_ok(sensor_data['status']):
                    if self._is_sensor_status_warning(sensor_data['status']):
                        results['warning_sensors'] += 1
                    else:
                        results['failed_sensors'] += 1
                        results['violations'].append({
                            'sensor': sensor_name,
                            'value': power_value,
                            'status': sensor_data['status'],
                            'issue': f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ–Ω—Å–æ—Ä–∞ –º–æ—â–Ω–æ—Å—Ç–∏: {sensor_data["status"]}'
                        })
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –º–æ—â–Ω–æ—Å—Ç–∏ (0-2000W –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤)
                if power_value < 0 or power_value > 2000:
                    results['failed_sensors'] += 1
                    results['violations'].append({
                        'sensor': sensor_name,
                        'value': power_value,
                        'issue': f'–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {power_value}W'
                    })
                else:
                    results['passed_sensors'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if results['failed_sensors'] > 0:
            results['status'] = 'FAIL'
        elif results['warning_sensors'] > 0:
            results['status'] = 'WARNING'
        else:
            results['status'] = 'PASS'
        
        return results
    
    def validate_discrete_sensors(self, sensors: Dict[str, Dict]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ discrete_sensors"""
        discrete_results = self._create_validation_result_dict()
        
        discrete_config = self.limits.get('discrete_sensors', {})
        acceptable_statuses = discrete_config.get('acceptable_statuses', {})
        critical_sensors = discrete_config.get('critical_if_different', [])
        
        for sensor_name, expected_statuses in acceptable_statuses.items():
            if sensor_name not in sensors:
                discrete_results['violations'].append({
                    'sensor': sensor_name,
                    'type': 'MISSING',
                    'message': f'–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–Ω—Å–æ—Ä {sensor_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                })
                continue
            
            discrete_results['actually_checked'] += 1
            sensor_data = sensors[sensor_name]
            actual_status = sensor_data['status']
            
            if actual_status in expected_statuses:
                discrete_results['passed_sensors'] += 1
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                if sensor_name in critical_sensors:
                    discrete_results['failed_sensors'] += 1
                    discrete_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'CRITICAL_STATUS',
                        'value': actual_status,
                        'expected': expected_statuses,
                        'message': f'{sensor_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å {actual_status}, –æ–∂–∏–¥–∞–ª—Å—è {expected_statuses}'
                    })
                else:
                    discrete_results['warning_sensors'] += 1
                    discrete_results['violations'].append({
                        'sensor': sensor_name,
                        'type': 'WARNING_STATUS',
                        'value': actual_status,
                        'expected': expected_statuses,
                        'message': f'{sensor_name}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {actual_status}, –æ–∂–∏–¥–∞–ª—Å—è {expected_statuses}'
                    })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if discrete_results['failed_sensors'] > 0:
            discrete_results['status'] = 'FAIL'
        elif discrete_results['warning_sensors'] > 0:
            discrete_results['status'] = 'WARNING'
        
        return discrete_results
    
    def perform_full_validation(self, conf: Dict[str, str]) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤ BMC...")
        
        validation_results = {
            'validation_info': {
                'limits_file': str(self.limits_file),
                'validation_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'board_model': self.limits.get('board_model', 'Unknown'),
                'total_sensors_available': 0
            },
            'overall_status': 'ERROR',
            'summary': {
                'total_checked': 0,
                'total_passed': 0,
                'total_violations': 0,
                'categories_checked': 0
            },
            'category_results': {},
            'raw_sensor_data': {},
            'error_details': None
        }
        
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                sensors = self.collect_sensor_data(conf)
                validation_results['validation_info']['total_sensors_available'] = len(sensors)
                validation_results['raw_sensor_data'] = sensors
            except Exception as sensor_error:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ERROR —Å—Ç–∞—Ç—É—Å
                validation_results['error_details'] = {
                    'error_type': 'SENSOR_COLLECTION_FAILED',
                    'error_message': str(sensor_error),
                    'stage': 'collect_sensor_data'
                }
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤: {sensor_error}")
                return validation_results
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_functions = [
                ('voltages', self.validate_voltage_sensors, "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π"),
                ('temperatures', self.validate_temperature_sensors, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä"),
                ('fans', self.validate_fan_sensors, "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤"),
                ('power', self.validate_power_sensors, "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ—â–Ω–æ—Å—Ç–∏"),
                ('discrete', self.validate_discrete_sensors, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤")
            ]
            
            category_results = {}
            successful_categories = 0
            
            for category_name, validation_func, description in category_functions:
                try:
                    print(f"‚îú‚îÄ {description}...")
                    category_result = validation_func(sensors)
                    category_results[category_name] = category_result
                    successful_categories += 1
                except Exception as category_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {description}: {category_error}")
                    category_results[category_name] = {
                        'status': 'ERROR',
                        'error': str(category_error),
                        'actually_checked': 0,
                        'passed_sensors': 0,
                        'warning_sensors': 0,
                        'failed_sensors': 0,
                        'missing_sensors': 0,
                        'skipped_sensors': 0,
                        'violations': []
                    }
            
            validation_results['category_results'] = category_results
            validation_results['summary']['categories_checked'] = successful_categories
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            all_statuses = [result['status'] for result in category_results.values()]
            
            if 'ERROR' in all_statuses:
                validation_results['overall_status'] = 'ERROR'
            elif 'FAIL' in all_statuses:
                validation_results['overall_status'] = 'FAIL'
            elif 'WARNING' in all_statuses:
                validation_results['overall_status'] = 'WARNING'
            else:
                validation_results['overall_status'] = 'PASS'
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä—ã
            total_violations = sum([
                len(result['violations']) for result in category_results.values()
            ])
            
            total_checked = sum([
                result.get('actually_checked', 0) for result in category_results.values()
            ])
            
            total_passed = sum([
                result.get('passed_sensors', 0) for result in category_results.values()
            ])
            
            validation_results['summary'].update({
                'total_checked': total_checked,
                'total_passed': total_passed,
                'total_violations': total_violations
            })
            
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_results['overall_status']}")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_checked} —Å–µ–Ω—Å–æ—Ä–æ–≤, {total_passed} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
            
        except Exception as unexpected_error:
            # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validation_results['error_details'] = {
                'error_type': 'UNEXPECTED_ERROR',
                'error_message': str(unexpected_error),
                'stage': 'perform_full_validation'
            }
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {unexpected_error}")
        
        return validation_results
    
    def save_validation_report(self, results: Dict, output_path: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        with output_file.open('w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

    def check_temp_thresholds(self, sensor_name: str, value: float, limits: Dict) -> Tuple[str, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞"""
        if value < limits.get('critical_low', -40):
            return 'FAIL', f'{sensor_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {value}¬∞C'
        elif value > limits.get('critical_high', 100):
            return 'FAIL', f'{sensor_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {value}¬∞C'
        elif value < limits.get('warning_low', 0):
            return 'WARNING', f'{sensor_name}: –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {value}¬∞C'
        elif value > limits.get('warning_high', 80):
            return 'WARNING', f'{sensor_name}: –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {value}¬∞C'
        else:
            return 'PASS', ''

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    import sys
    
    if len(sys.argv) > 1:
        limits_file = sys.argv[1]
    else:
        limits_file = 'reference/sensor_limits.json'
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BMC
    if len(sys.argv) > 4:
        conf = {
            'bmc_ip': sys.argv[2],
            'bmc_user': sys.argv[3],
            'bmc_pass': sys.argv[4]
        }
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 sensor_validator.py <limits_file> <bmc_ip> <bmc_user> <bmc_pass>")
        sys.exit(1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        validator = SensorValidator(limits_file)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        results = validator.perform_full_validation(conf)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò: {results['overall_status']}")
        print(f"üìä –°–µ–Ω—Å–æ—Ä—ã: {results['summary']['total_checked']} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, {results['summary']['total_passed']} –ø—Ä–æ—à–ª–∏")
        print(f"‚ö†Ô∏è  –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {results['summary']['total_violations']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        validator.save_validation_report(results, 'logs/sensor_validation_report.json')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if results['overall_status'] == 'FAIL':
            sys.exit(1)
        elif results['overall_status'] == 'WARNING':
            sys.exit(2)
        else:
            sys.exit(0)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤: {e}")
        sys.exit(3)

if __name__ == '__main__':
    main() 